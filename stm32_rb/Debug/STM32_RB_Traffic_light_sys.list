
STM32_RB_Traffic_light_sys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c20  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  00005084  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  00005084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  00005084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08003de8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000084  08003e6c  00005084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08003e6c  00005344  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be21  00000000  00000000  000050ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219a  00000000  00000000  00010ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00013068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a87  00000000  00000000  00013e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001870b  00000000  00000000  0001489f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117fe  00000000  00000000  0002cfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab67  00000000  00000000  0003e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c930f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c94  00000000  00000000  000c9354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ccfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d14 	.word	0x08003d14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003d14 	.word	0x08003d14

0800014c <button_init>:





void button_init(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e02a      	b.n	80001ae <button_init+0x62>
        buttonState[i] = BUTTON_RELEASED;
 8000158:	4a19      	ldr	r2, [pc, #100]	@ (80001c0 <button_init+0x74>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]
        flagForButtonPress[i] = 0;
 8000162:	4a18      	ldr	r2, [pc, #96]	@ (80001c4 <button_init+0x78>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4413      	add	r3, r2
 8000168:	2200      	movs	r2, #0
 800016a:	701a      	strb	r2, [r3, #0]
        flagForButtonPress_2s[i] = 0;
 800016c:	4a16      	ldr	r2, [pc, #88]	@ (80001c8 <button_init+0x7c>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	4413      	add	r3, r2
 8000172:	2200      	movs	r2, #0
 8000174:	701a      	strb	r2, [r3, #0]
        counterForButtonPress_2s[i] = 0;
 8000176:	4a15      	ldr	r2, [pc, #84]	@ (80001cc <button_init+0x80>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2100      	movs	r1, #0
 800017c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000180:	4a13      	ldr	r2, [pc, #76]	@ (80001d0 <button_init+0x84>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4413      	add	r3, r2
 8000186:	2201      	movs	r2, #1
 8000188:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer0[i] = BUTTON_IS_RELEASED;
 800018a:	4a12      	ldr	r2, [pc, #72]	@ (80001d4 <button_init+0x88>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	4413      	add	r3, r2
 8000190:	2201      	movs	r2, #1
 8000192:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 8000194:	4a10      	ldr	r2, [pc, #64]	@ (80001d8 <button_init+0x8c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4413      	add	r3, r2
 800019a:	2201      	movs	r2, #1
 800019c:	701a      	strb	r2, [r3, #0]
        debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 800019e:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <button_init+0x90>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	2201      	movs	r2, #1
 80001a6:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NO_OF_BUTTONS; i++){
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3301      	adds	r3, #1
 80001ac:	607b      	str	r3, [r7, #4]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	ddd1      	ble.n	8000158 <button_init+0xc>
    }
}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	200000b0 	.word	0x200000b0
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	200000b8 	.word	0x200000b8
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	200000a0 	.word	0x200000a0
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	200000a8 	.word	0x200000a8

080001e0 <is_button_pressed>:




//function
int is_button_pressed(uint8_t index){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d901      	bls.n	80001f4 <is_button_pressed+0x14>
 80001f0:	2300      	movs	r3, #0
 80001f2:	e00d      	b.n	8000210 <is_button_pressed+0x30>
	if(flagForButtonPress[index]){
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	4a08      	ldr	r2, [pc, #32]	@ (8000218 <is_button_pressed+0x38>)
 80001f8:	5cd3      	ldrb	r3, [r2, r3]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d007      	beq.n	800020e <is_button_pressed+0x2e>
		lcd_clear_display();
 80001fe:	f000 fc3e 	bl	8000a7e <lcd_clear_display>
		flagForButtonPress[index] = 0;
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <is_button_pressed+0x38>)
 8000206:	2100      	movs	r1, #0
 8000208:	54d1      	strb	r1, [r2, r3]
		return 1;
 800020a:	2301      	movs	r3, #1
 800020c:	e000      	b.n	8000210 <is_button_pressed+0x30>
	}
	return 0;
 800020e:	2300      	movs	r3, #0
}
 8000210:	4618      	mov	r0, r3
 8000212:	3708      	adds	r7, #8
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	200000b0 	.word	0x200000b0

0800021c <button_reading>:



void button_reading(void){
 800021c:	b590      	push	{r4, r7, lr}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e07d      	b.n	8000324 <button_reading+0x108>
        debounceButtonBuffer0[i] = debounceButtonBuffer1[i];
 8000228:	79fa      	ldrb	r2, [r7, #7]
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	4942      	ldr	r1, [pc, #264]	@ (8000338 <button_reading+0x11c>)
 800022e:	5c89      	ldrb	r1, [r1, r2]
 8000230:	4a42      	ldr	r2, [pc, #264]	@ (800033c <button_reading+0x120>)
 8000232:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = debounceButtonBuffer2[i];
 8000234:	79fa      	ldrb	r2, [r7, #7]
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4941      	ldr	r1, [pc, #260]	@ (8000340 <button_reading+0x124>)
 800023a:	5c89      	ldrb	r1, [r1, r2]
 800023c:	4a3e      	ldr	r2, [pc, #248]	@ (8000338 <button_reading+0x11c>)
 800023e:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer2[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a40      	ldr	r2, [pc, #256]	@ (8000344 <button_reading+0x128>)
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	493f      	ldr	r1, [pc, #252]	@ (8000348 <button_reading+0x12c>)
 800024c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000250:	79fc      	ldrb	r4, [r7, #7]
 8000252:	4619      	mov	r1, r3
 8000254:	4610      	mov	r0, r2
 8000256:	f001 fbdb 	bl	8001a10 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b38      	ldr	r3, [pc, #224]	@ (8000340 <button_reading+0x124>)
 8000260:	551a      	strb	r2, [r3, r4]

        if(debounceButtonBuffer0[i] == debounceButtonBuffer1[i] && debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	4a35      	ldr	r2, [pc, #212]	@ (800033c <button_reading+0x120>)
 8000266:	5cd2      	ldrb	r2, [r2, r3]
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4933      	ldr	r1, [pc, #204]	@ (8000338 <button_reading+0x11c>)
 800026c:	5ccb      	ldrb	r3, [r1, r3]
 800026e:	429a      	cmp	r2, r3
 8000270:	d155      	bne.n	800031e <button_reading+0x102>
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	4a30      	ldr	r2, [pc, #192]	@ (8000338 <button_reading+0x11c>)
 8000276:	5cd2      	ldrb	r2, [r2, r3]
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4931      	ldr	r1, [pc, #196]	@ (8000340 <button_reading+0x124>)
 800027c:	5ccb      	ldrb	r3, [r1, r3]
 800027e:	429a      	cmp	r2, r3
 8000280:	d14d      	bne.n	800031e <button_reading+0x102>
        	// Trạng thái nút nhấn đã ổn định
            if(buttonBuffer[i] != debounceButtonBuffer2[i]){
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a31      	ldr	r2, [pc, #196]	@ (800034c <button_reading+0x130>)
 8000286:	5cd2      	ldrb	r2, [r2, r3]
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	492d      	ldr	r1, [pc, #180]	@ (8000340 <button_reading+0x124>)
 800028c:	5ccb      	ldrb	r3, [r1, r3]
 800028e:	429a      	cmp	r2, r3
 8000290:	d022      	beq.n	80002d8 <button_reading+0xbc>
                // Trạng thái nút nhấn đã thay đổi
                buttonBuffer[i] = debounceButtonBuffer2[i];
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	492a      	ldr	r1, [pc, #168]	@ (8000340 <button_reading+0x124>)
 8000298:	5c89      	ldrb	r1, [r1, r2]
 800029a:	4a2c      	ldr	r2, [pc, #176]	@ (800034c <button_reading+0x130>)
 800029c:	54d1      	strb	r1, [r2, r3]

                if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED){
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a27      	ldr	r2, [pc, #156]	@ (8000340 <button_reading+0x124>)
 80002a2:	5cd3      	ldrb	r3, [r2, r3]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d109      	bne.n	80002bc <button_reading+0xa0>
                    // Nút nhấn chuyển từ thả sang nhấn
                    flagForButtonPress[i] = 1;
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4a29      	ldr	r2, [pc, #164]	@ (8000350 <button_reading+0x134>)
 80002ac:	2101      	movs	r1, #1
 80002ae:	54d1      	strb	r1, [r2, r3]
                    counterForButtonPress_2s[i] = DURATION_FOR_AUTO_INCREASING; // Đặt bộ đếm
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	4a28      	ldr	r2, [pc, #160]	@ (8000354 <button_reading+0x138>)
 80002b4:	21c8      	movs	r1, #200	@ 0xc8
 80002b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80002ba:	e030      	b.n	800031e <button_reading+0x102>
                } else {
                    // Nút nhấn chuyển từ nhấn sang thả
                    counterForButtonPress_2s[i] = 0;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <button_reading+0x138>)
 80002c0:	2100      	movs	r1, #0
 80002c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                    flagForButtonPress[i] = 0;
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4a21      	ldr	r2, [pc, #132]	@ (8000350 <button_reading+0x134>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	54d1      	strb	r1, [r2, r3]
                    flagForButtonPress_2s[i] = 0;
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	4a21      	ldr	r2, [pc, #132]	@ (8000358 <button_reading+0x13c>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	54d1      	strb	r1, [r2, r3]
 80002d6:	e022      	b.n	800031e <button_reading+0x102>
                }
            }
				else if(debounceButtonBuffer2[i] == BUTTON_IS_PRESSED && counterForButtonPress_2s[i] > 0){
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <button_reading+0x124>)
 80002dc:	5cd3      	ldrb	r3, [r2, r3]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d11d      	bne.n	800031e <button_reading+0x102>
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000354 <button_reading+0x138>)
 80002e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d017      	beq.n	800031e <button_reading+0x102>
								counterForButtonPress_2s[i]--;
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	4a18      	ldr	r2, [pc, #96]	@ (8000354 <button_reading+0x138>)
 80002f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80002f6:	3a01      	subs	r2, #1
 80002f8:	b291      	uxth	r1, r2
 80002fa:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <button_reading+0x138>)
 80002fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
								if(counterForButtonPress_2s[i] == 0){
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4a14      	ldr	r2, [pc, #80]	@ (8000354 <button_reading+0x138>)
 8000304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d108      	bne.n	800031e <button_reading+0x102>
//									flagForButtonPress_2s[i] = 1;
									flagForButtonPress[i] = 1;
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	4a10      	ldr	r2, [pc, #64]	@ (8000350 <button_reading+0x134>)
 8000310:	2101      	movs	r1, #1
 8000312:	54d1      	strb	r1, [r2, r3]
									counterForButtonPress_2s[i] = DURATION_FOR_AUTO_INCREASING;
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	4a0f      	ldr	r2, [pc, #60]	@ (8000354 <button_reading+0x138>)
 8000318:	21c8      	movs	r1, #200	@ 0xc8
 800031a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NO_OF_BUTTONS; i++) {
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	3301      	adds	r3, #1
 8000322:	71fb      	strb	r3, [r7, #7]
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b02      	cmp	r3, #2
 8000328:	f67f af7e 	bls.w	8000228 <button_reading+0xc>

								}
							}
        }
    }
}
 800032c:	bf00      	nop
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	200000a4 	.word	0x200000a4
 800033c:	200000a0 	.word	0x200000a0
 8000340:	200000a8 	.word	0x200000a8
 8000344:	20000000 	.word	0x20000000
 8000348:	2000000c 	.word	0x2000000c
 800034c:	200000ac 	.word	0x200000ac
 8000350:	200000b0 	.word	0x200000b0
 8000354:	200000b8 	.word	0x200000b8
 8000358:	200000b4 	.word	0x200000b4

0800035c <fsm_automatic_run>:
#include "main.h"
#include "fsm_manual.h"



void fsm_automatic_run(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	switch(status){
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <fsm_automatic_run+0xa8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b0b      	subs	r3, #11
 8000366:	2b03      	cmp	r3, #3
 8000368:	d842      	bhi.n	80003f0 <fsm_automatic_run+0x94>
 800036a:	a201      	add	r2, pc, #4	@ (adr r2, 8000370 <fsm_automatic_run+0x14>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000397 	.word	0x08000397
 8000374:	080003b5 	.word	0x080003b5
 8000378:	080003d3 	.word	0x080003d3
 800037c:	08000381 	.word	0x08000381
		case INIT:
			//TODO
			state_init();
 8000380:	f000 fba6 	bl	8000ad0 <state_init>
			status = AUTO_RED;
 8000384:	4b1f      	ldr	r3, [pc, #124]	@ (8000404 <fsm_automatic_run+0xa8>)
 8000386:	220b      	movs	r2, #11
 8000388:	601a      	str	r2, [r3, #0]
			setTimer1(duration_time_of_AUTO_RED);
 800038a:	4b1f      	ldr	r3, [pc, #124]	@ (8000408 <fsm_automatic_run+0xac>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fe00 	bl	8000f94 <setTimer1>
			break;
 8000394:	e033      	b.n	80003fe <fsm_automatic_run+0xa2>
		case AUTO_RED:
			//TODO
			state_red();
 8000396:	f000 fbab 	bl	8000af0 <state_red>
			if(timer1_flag == 1){
 800039a:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <fsm_automatic_run+0xb0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d128      	bne.n	80003f4 <fsm_automatic_run+0x98>
				status = AUTO_GREEN;
 80003a2:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003a4:	220c      	movs	r2, #12
 80003a6:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_GREEN);
 80003a8:	4b19      	ldr	r3, [pc, #100]	@ (8000410 <fsm_automatic_run+0xb4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4618      	mov	r0, r3
 80003ae:	f000 fdf1 	bl	8000f94 <setTimer1>
			}

			break;
 80003b2:	e01f      	b.n	80003f4 <fsm_automatic_run+0x98>
		case AUTO_GREEN:
			//TODO
			state_green();
 80003b4:	f000 fbac 	bl	8000b10 <state_green>
			if(timer1_flag == 1){
 80003b8:	4b14      	ldr	r3, [pc, #80]	@ (800040c <fsm_automatic_run+0xb0>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d11b      	bne.n	80003f8 <fsm_automatic_run+0x9c>
				status = AUTO_YELLOW;
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003c2:	220d      	movs	r2, #13
 80003c4:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_YELLOW);
 80003c6:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <fsm_automatic_run+0xb8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fde2 	bl	8000f94 <setTimer1>
			}

			break;
 80003d0:	e012      	b.n	80003f8 <fsm_automatic_run+0x9c>
		case AUTO_YELLOW:
			//TODO
			state_yellow();
 80003d2:	f000 fbad 	bl	8000b30 <state_yellow>

			if(timer1_flag == 1){
 80003d6:	4b0d      	ldr	r3, [pc, #52]	@ (800040c <fsm_automatic_run+0xb0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d10e      	bne.n	80003fc <fsm_automatic_run+0xa0>
				status = AUTO_RED;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <fsm_automatic_run+0xa8>)
 80003e0:	220b      	movs	r2, #11
 80003e2:	601a      	str	r2, [r3, #0]
				setTimer1(duration_time_of_AUTO_RED);
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <fsm_automatic_run+0xac>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fdd3 	bl	8000f94 <setTimer1>
			}

			break;
 80003ee:	e005      	b.n	80003fc <fsm_automatic_run+0xa0>
		default:
			break;
 80003f0:	bf00      	nop
 80003f2:	e004      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003f4:	bf00      	nop
 80003f6:	e002      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003f8:	bf00      	nop
 80003fa:	e000      	b.n	80003fe <fsm_automatic_run+0xa2>
			break;
 80003fc:	bf00      	nop

	}
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000124 	.word	0x20000124
 8000408:	20000014 	.word	0x20000014
 800040c:	200001e4 	.word	0x200001e4
 8000410:	2000001c 	.word	0x2000001c
 8000414:	20000018 	.word	0x20000018

08000418 <fsm_automatic_run1>:

void fsm_automatic_run1(){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
    switch(status1){
 800041c:	4b29      	ldr	r3, [pc, #164]	@ (80004c4 <fsm_automatic_run1+0xac>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b0b      	subs	r3, #11
 8000422:	2b04      	cmp	r3, #4
 8000424:	d844      	bhi.n	80004b0 <fsm_automatic_run1+0x98>
 8000426:	a201      	add	r2, pc, #4	@ (adr r2, 800042c <fsm_automatic_run1+0x14>)
 8000428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042c:	08000457 	.word	0x08000457
 8000430:	08000475 	.word	0x08000475
 8000434:	08000493 	.word	0x08000493
 8000438:	080004b1 	.word	0x080004b1
 800043c:	08000441 	.word	0x08000441
        case INIT1:
            //TODO
            state_init1();
 8000440:	f000 fb86 	bl	8000b50 <state_init1>
            status1 = AUTO_GREEN;
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000446:	220c      	movs	r2, #12
 8000448:	601a      	str	r2, [r3, #0]
            setTimer2(duration_time_of_AUTO_GREEN);
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <fsm_automatic_run1+0xb0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fdba 	bl	8000fc8 <setTimer2>
            break;
 8000454:	e033      	b.n	80004be <fsm_automatic_run1+0xa6>
        case AUTO_RED:
            //TODO
            state_red1();
 8000456:	f000 fb8d 	bl	8000b74 <state_red1>
            if(timer2_flag == 1){
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <fsm_automatic_run1+0xb4>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d128      	bne.n	80004b4 <fsm_automatic_run1+0x9c>
                status1 = AUTO_GREEN;
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000464:	220c      	movs	r2, #12
 8000466:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_GREEN);
 8000468:	4b17      	ldr	r3, [pc, #92]	@ (80004c8 <fsm_automatic_run1+0xb0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fdab 	bl	8000fc8 <setTimer2>
            }
            break;
 8000472:	e01f      	b.n	80004b4 <fsm_automatic_run1+0x9c>
        case AUTO_GREEN:
            //TODO
            state_green1();
 8000474:	f000 fb90 	bl	8000b98 <state_green1>

            if(timer2_flag == 1){
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <fsm_automatic_run1+0xb4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d11b      	bne.n	80004b8 <fsm_automatic_run1+0xa0>
                status1 = AUTO_YELLOW;
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <fsm_automatic_run1+0xac>)
 8000482:	220d      	movs	r2, #13
 8000484:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_YELLOW);
 8000486:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <fsm_automatic_run1+0xb8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f000 fd9c 	bl	8000fc8 <setTimer2>
            }
            break;
 8000490:	e012      	b.n	80004b8 <fsm_automatic_run1+0xa0>
        case AUTO_YELLOW:
            //TODO
            state_yellow1();
 8000492:	f000 fb93 	bl	8000bbc <state_yellow1>

            if(timer2_flag == 1){
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <fsm_automatic_run1+0xb4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d10e      	bne.n	80004bc <fsm_automatic_run1+0xa4>
                status1 = AUTO_RED;
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <fsm_automatic_run1+0xac>)
 80004a0:	220b      	movs	r2, #11
 80004a2:	601a      	str	r2, [r3, #0]
                setTimer2(duration_time_of_AUTO_RED);
 80004a4:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <fsm_automatic_run1+0xbc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 fd8d 	bl	8000fc8 <setTimer2>
            }
            break;
 80004ae:	e005      	b.n	80004bc <fsm_automatic_run1+0xa4>
        default:
            break;
 80004b0:	bf00      	nop
 80004b2:	e004      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004b4:	bf00      	nop
 80004b6:	e002      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004b8:	bf00      	nop
 80004ba:	e000      	b.n	80004be <fsm_automatic_run1+0xa6>
            break;
 80004bc:	bf00      	nop
    }
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000128 	.word	0x20000128
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	200001e8 	.word	0x200001e8
 80004d0:	20000018 	.word	0x20000018
 80004d4:	20000014 	.word	0x20000014

080004d8 <fsm_manual_run>:
char buffer[30];




void fsm_manual_run(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	switch(mode){
 80004dc:	4bba      	ldr	r3, [pc, #744]	@ (80007c8 <fsm_manual_run+0x2f0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b04      	cmp	r3, #4
 80004e2:	f200 8204 	bhi.w	80008ee <fsm_manual_run+0x416>
 80004e6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ec <fsm_manual_run+0x14>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	08000501 	.word	0x08000501
 80004f0:	0800052f 	.word	0x0800052f
 80004f4:	08000605 	.word	0x08000605
 80004f8:	08000821 	.word	0x08000821
 80004fc:	080006d5 	.word	0x080006d5
		case INIT_SYSTEM:
			  button_init();
 8000500:	f7ff fe24 	bl	800014c <button_init>
			  status = INIT;
 8000504:	4bb1      	ldr	r3, [pc, #708]	@ (80007cc <fsm_manual_run+0x2f4>)
 8000506:	220e      	movs	r2, #14
 8000508:	601a      	str	r2, [r3, #0]
			  status1 = INIT1;
 800050a:	4bb1      	ldr	r3, [pc, #708]	@ (80007d0 <fsm_manual_run+0x2f8>)
 800050c:	220f      	movs	r2, #15
 800050e:	601a      	str	r2, [r3, #0]
			  setTimer0(25);
 8000510:	2019      	movs	r0, #25
 8000512:	f000 fd25 	bl	8000f60 <setTimer0>
			  setTimer6(50);
 8000516:	2032      	movs	r0, #50	@ 0x32
 8000518:	f000 fd70 	bl	8000ffc <setTimer6>

			  	lcd_init();
 800051c:	f000 fa6c 	bl	80009f8 <lcd_init>
				HAL_Delay(25);
 8000520:	2019      	movs	r0, #25
 8000522:	f000 ffbf 	bl	80014a4 <HAL_Delay>

			  mode = NORMAL_MODE;
 8000526:	4ba8      	ldr	r3, [pc, #672]	@ (80007c8 <fsm_manual_run+0x2f0>)
 8000528:	2201      	movs	r2, #1
 800052a:	601a      	str	r2, [r3, #0]


			break;
 800052c:	e1e8      	b.n	8000900 <fsm_manual_run+0x428>
		case NORMAL_MODE:
//				  update_2_led_7_seg_buffer_left(timer1_counter/100);
//				  update_2_led_7_seg_buffer_right(timer2_counter/100);
				  sprintf(buffer1, "%d ", timer1_counter/100);
 800052e:	4ba9      	ldr	r3, [pc, #676]	@ (80007d4 <fsm_manual_run+0x2fc>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4aa9      	ldr	r2, [pc, #676]	@ (80007d8 <fsm_manual_run+0x300>)
 8000534:	fb82 1203 	smull	r1, r2, r2, r3
 8000538:	1152      	asrs	r2, r2, #5
 800053a:	17db      	asrs	r3, r3, #31
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	461a      	mov	r2, r3
 8000540:	49a6      	ldr	r1, [pc, #664]	@ (80007dc <fsm_manual_run+0x304>)
 8000542:	48a7      	ldr	r0, [pc, #668]	@ (80007e0 <fsm_manual_run+0x308>)
 8000544:	f002 ff36 	bl	80033b4 <siprintf>
				  sprintf(buffer2, "%d ", timer2_counter/100);
 8000548:	4ba6      	ldr	r3, [pc, #664]	@ (80007e4 <fsm_manual_run+0x30c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4aa2      	ldr	r2, [pc, #648]	@ (80007d8 <fsm_manual_run+0x300>)
 800054e:	fb82 1203 	smull	r1, r2, r2, r3
 8000552:	1152      	asrs	r2, r2, #5
 8000554:	17db      	asrs	r3, r3, #31
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	461a      	mov	r2, r3
 800055a:	49a0      	ldr	r1, [pc, #640]	@ (80007dc <fsm_manual_run+0x304>)
 800055c:	48a2      	ldr	r0, [pc, #648]	@ (80007e8 <fsm_manual_run+0x310>)
 800055e:	f002 ff29 	bl	80033b4 <siprintf>


				  lcd_goto_XY(1, 0);
 8000562:	2100      	movs	r1, #0
 8000564:	2001      	movs	r0, #1
 8000566:	f000 fa91 	bl	8000a8c <lcd_goto_XY>
				  lcd_send_string("Lane 1:");
 800056a:	48a0      	ldr	r0, [pc, #640]	@ (80007ec <fsm_manual_run+0x314>)
 800056c:	f000 fa72 	bl	8000a54 <lcd_send_string>


				  lcd_goto_XY(1, 8);
 8000570:	2108      	movs	r1, #8
 8000572:	2001      	movs	r0, #1
 8000574:	f000 fa8a 	bl	8000a8c <lcd_goto_XY>
				  lcd_send_string(buffer1);
 8000578:	4899      	ldr	r0, [pc, #612]	@ (80007e0 <fsm_manual_run+0x308>)
 800057a:	f000 fa6b 	bl	8000a54 <lcd_send_string>


				  lcd_goto_XY(2, 0);           // Dòng 2, cột 1 (bắt đầu từ 0)
 800057e:	2100      	movs	r1, #0
 8000580:	2002      	movs	r0, #2
 8000582:	f000 fa83 	bl	8000a8c <lcd_goto_XY>
				  lcd_send_string("Lane 2:");   // Hiển thị nhãn Lane 2
 8000586:	489a      	ldr	r0, [pc, #616]	@ (80007f0 <fsm_manual_run+0x318>)
 8000588:	f000 fa64 	bl	8000a54 <lcd_send_string>


				  lcd_goto_XY(2, 8);           // Dòng 2, cột 8 (để hiển thị giá trị buffer2)
 800058c:	2108      	movs	r1, #8
 800058e:	2002      	movs	r0, #2
 8000590:	f000 fa7c 	bl	8000a8c <lcd_goto_XY>
				  lcd_send_string(buffer2);    // Hiển thị thời gian còn lại cho Lane 2
 8000594:	4894      	ldr	r0, [pc, #592]	@ (80007e8 <fsm_manual_run+0x310>)
 8000596:	f000 fa5d 	bl	8000a54 <lcd_send_string>



				  fsm_automatic_run();
 800059a:	f7ff fedf 	bl	800035c <fsm_automatic_run>
				  fsm_automatic_run1();
 800059e:	f7ff ff3b 	bl	8000418 <fsm_automatic_run1>


					if(is_button_pressed(0) == 1){
 80005a2:	2000      	movs	r0, #0
 80005a4:	f7ff fe1c 	bl	80001e0 <is_button_pressed>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	f040 81a1 	bne.w	80008f2 <fsm_manual_run+0x41a>
						clearTimer1();
 80005b0:	f000 fd3e 	bl	8001030 <clearTimer1>
						clearTimer2();
 80005b4:	f000 fd4c 	bl	8001050 <clearTimer2>
						status = AUTO_RED;
 80005b8:	4b84      	ldr	r3, [pc, #528]	@ (80007cc <fsm_manual_run+0x2f4>)
 80005ba:	220b      	movs	r2, #11
 80005bc:	601a      	str	r2, [r3, #0]
						status1 = AUTO_RED;
 80005be:	4b84      	ldr	r3, [pc, #528]	@ (80007d0 <fsm_manual_run+0x2f8>)
 80005c0:	220b      	movs	r2, #11
 80005c2:	601a      	str	r2, [r3, #0]

						HAL_GPIO_WritePin(GPIOB, D3_Pin, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2108      	movs	r1, #8
 80005c8:	488a      	ldr	r0, [pc, #552]	@ (80007f4 <fsm_manual_run+0x31c>)
 80005ca:	f001 fa38 	bl	8001a3e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D4_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2120      	movs	r1, #32
 80005d2:	4888      	ldr	r0, [pc, #544]	@ (80007f4 <fsm_manual_run+0x31c>)
 80005d4:	f001 fa33 	bl	8001a3e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D6_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005de:	4885      	ldr	r0, [pc, #532]	@ (80007f4 <fsm_manual_run+0x31c>)
 80005e0:	f001 fa2d 	bl	8001a3e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, D5_Pin, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2110      	movs	r1, #16
 80005e8:	4882      	ldr	r0, [pc, #520]	@ (80007f4 <fsm_manual_run+0x31c>)
 80005ea:	f001 fa28 	bl	8001a3e <HAL_GPIO_WritePin>
					    setTimer6(50);
 80005ee:	2032      	movs	r0, #50	@ 0x32
 80005f0:	f000 fd04 	bl	8000ffc <setTimer6>


					    buffer_duration_time = duration_time_of_AUTO_RED;
 80005f4:	4b80      	ldr	r3, [pc, #512]	@ (80007f8 <fsm_manual_run+0x320>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a80      	ldr	r2, [pc, #512]	@ (80007fc <fsm_manual_run+0x324>)
 80005fa:	6013      	str	r3, [r2, #0]


					    mode = MAN_RED_MODE;
 80005fc:	4b72      	ldr	r3, [pc, #456]	@ (80007c8 <fsm_manual_run+0x2f0>)
 80005fe:	2202      	movs	r2, #2
 8000600:	601a      	str	r2, [r3, #0]

					}

			break;
 8000602:	e176      	b.n	80008f2 <fsm_manual_run+0x41a>
//					update_2_led_7_seg_buffer_right(buffer_duration_time/100);




					sprintf(buffer, "%d ", buffer_duration_time/100);
 8000604:	4b7d      	ldr	r3, [pc, #500]	@ (80007fc <fsm_manual_run+0x324>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a73      	ldr	r2, [pc, #460]	@ (80007d8 <fsm_manual_run+0x300>)
 800060a:	fb82 1203 	smull	r1, r2, r2, r3
 800060e:	1152      	asrs	r2, r2, #5
 8000610:	17db      	asrs	r3, r3, #31
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	461a      	mov	r2, r3
 8000616:	4971      	ldr	r1, [pc, #452]	@ (80007dc <fsm_manual_run+0x304>)
 8000618:	4879      	ldr	r0, [pc, #484]	@ (8000800 <fsm_manual_run+0x328>)
 800061a:	f002 fecb 	bl	80033b4 <siprintf>


					lcd_goto_XY(1, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2001      	movs	r0, #1
 8000622:	f000 fa33 	bl	8000a8c <lcd_goto_XY>
					lcd_send_string("Mode2: MAN_RED");
 8000626:	4877      	ldr	r0, [pc, #476]	@ (8000804 <fsm_manual_run+0x32c>)
 8000628:	f000 fa14 	bl	8000a54 <lcd_send_string>


					lcd_goto_XY(2, 0);
 800062c:	2100      	movs	r1, #0
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fa2c 	bl	8000a8c <lcd_goto_XY>
					lcd_send_string("Time");
 8000634:	4874      	ldr	r0, [pc, #464]	@ (8000808 <fsm_manual_run+0x330>)
 8000636:	f000 fa0d 	bl	8000a54 <lcd_send_string>


					lcd_goto_XY(2, 8);
 800063a:	2108      	movs	r1, #8
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fa25 	bl	8000a8c <lcd_goto_XY>

					lcd_send_string(buffer);
 8000642:	486f      	ldr	r0, [pc, #444]	@ (8000800 <fsm_manual_run+0x328>)
 8000644:	f000 fa06 	bl	8000a54 <lcd_send_string>




					if(timer6_flag == 1){
 8000648:	4b70      	ldr	r3, [pc, #448]	@ (800080c <fsm_manual_run+0x334>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d106      	bne.n	800065e <fsm_manual_run+0x186>
						blinkind_led_traffic_x();
 8000650:	f000 fac6 	bl	8000be0 <blinkind_led_traffic_x>
						blinkind_led_traffic_y();
 8000654:	f000 faf6 	bl	8000c44 <blinkind_led_traffic_y>
						setTimer6(50);
 8000658:	2032      	movs	r0, #50	@ 0x32
 800065a:	f000 fccf 	bl	8000ffc <setTimer6>
					}


					if(is_button_pressed(0) == 1){
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff fdbe 	bl	80001e0 <is_button_pressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d111      	bne.n	800068e <fsm_manual_run+0x1b6>
						clearTimer6();
 800066a:	f000 fd01 	bl	8001070 <clearTimer6>
						status = AUTO_YELLOW;
 800066e:	4b57      	ldr	r3, [pc, #348]	@ (80007cc <fsm_manual_run+0x2f4>)
 8000670:	220d      	movs	r2, #13
 8000672:	601a      	str	r2, [r3, #0]
						status1 = AUTO_YELLOW;
 8000674:	4b56      	ldr	r3, [pc, #344]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000676:	220d      	movs	r2, #13
 8000678:	601a      	str	r2, [r3, #0]
						setTimer6(50);
 800067a:	2032      	movs	r0, #50	@ 0x32
 800067c:	f000 fcbe 	bl	8000ffc <setTimer6>
						buffer_duration_time = duration_time_of_AUTO_YELLOW;
 8000680:	4b63      	ldr	r3, [pc, #396]	@ (8000810 <fsm_manual_run+0x338>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a5d      	ldr	r2, [pc, #372]	@ (80007fc <fsm_manual_run+0x324>)
 8000686:	6013      	str	r3, [r2, #0]
						mode = MAN_YELLOW_MODE;
 8000688:	4b4f      	ldr	r3, [pc, #316]	@ (80007c8 <fsm_manual_run+0x2f0>)
 800068a:	2203      	movs	r2, #3
 800068c:	601a      	str	r2, [r3, #0]




					}
					if(is_button_pressed(1) == 1){
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fda6 	bl	80001e0 <is_button_pressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d110      	bne.n	80006bc <fsm_manual_run+0x1e4>
						buffer_duration_time = (buffer_duration_time + 100) % 10000;
 800069a:	4b58      	ldr	r3, [pc, #352]	@ (80007fc <fsm_manual_run+0x324>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80006a2:	4b5c      	ldr	r3, [pc, #368]	@ (8000814 <fsm_manual_run+0x33c>)
 80006a4:	fb83 1302 	smull	r1, r3, r3, r2
 80006a8:	1319      	asrs	r1, r3, #12
 80006aa:	17d3      	asrs	r3, r2, #31
 80006ac:	1acb      	subs	r3, r1, r3
 80006ae:	f242 7110 	movw	r1, #10000	@ 0x2710
 80006b2:	fb01 f303 	mul.w	r3, r1, r3
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	4a50      	ldr	r2, [pc, #320]	@ (80007fc <fsm_manual_run+0x324>)
 80006ba:	6013      	str	r3, [r2, #0]

					}
					if(is_button_pressed(2) == 1){
 80006bc:	2002      	movs	r0, #2
 80006be:	f7ff fd8f 	bl	80001e0 <is_button_pressed>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	f040 8116 	bne.w	80008f6 <fsm_manual_run+0x41e>
						duration_time_of_AUTO_RED = buffer_duration_time;
 80006ca:	4b4c      	ldr	r3, [pc, #304]	@ (80007fc <fsm_manual_run+0x324>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a4a      	ldr	r2, [pc, #296]	@ (80007f8 <fsm_manual_run+0x320>)
 80006d0:	6013      	str	r3, [r2, #0]
					}

			break;
 80006d2:	e110      	b.n	80008f6 <fsm_manual_run+0x41e>
//					update_2_led_7_seg_buffer_right(buffer_duration_time/100);




			sprintf(buffer, "%d ", buffer_duration_time/100);
 80006d4:	4b49      	ldr	r3, [pc, #292]	@ (80007fc <fsm_manual_run+0x324>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a3f      	ldr	r2, [pc, #252]	@ (80007d8 <fsm_manual_run+0x300>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1152      	asrs	r2, r2, #5
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	493d      	ldr	r1, [pc, #244]	@ (80007dc <fsm_manual_run+0x304>)
 80006e8:	4845      	ldr	r0, [pc, #276]	@ (8000800 <fsm_manual_run+0x328>)
 80006ea:	f002 fe63 	bl	80033b4 <siprintf>


			lcd_goto_XY(1, 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 f9cb 	bl	8000a8c <lcd_goto_XY>
			lcd_send_string("Mode4: MAN_GREEN");
 80006f6:	4848      	ldr	r0, [pc, #288]	@ (8000818 <fsm_manual_run+0x340>)
 80006f8:	f000 f9ac 	bl	8000a54 <lcd_send_string>


			lcd_goto_XY(2, 0);
 80006fc:	2100      	movs	r1, #0
 80006fe:	2002      	movs	r0, #2
 8000700:	f000 f9c4 	bl	8000a8c <lcd_goto_XY>
			lcd_send_string("Time");
 8000704:	4840      	ldr	r0, [pc, #256]	@ (8000808 <fsm_manual_run+0x330>)
 8000706:	f000 f9a5 	bl	8000a54 <lcd_send_string>


			lcd_goto_XY(2, 8);
 800070a:	2108      	movs	r1, #8
 800070c:	2002      	movs	r0, #2
 800070e:	f000 f9bd 	bl	8000a8c <lcd_goto_XY>

			lcd_send_string(buffer);
 8000712:	483b      	ldr	r0, [pc, #236]	@ (8000800 <fsm_manual_run+0x328>)
 8000714:	f000 f99e 	bl	8000a54 <lcd_send_string>




					if(timer6_flag == 1){
 8000718:	4b3c      	ldr	r3, [pc, #240]	@ (800080c <fsm_manual_run+0x334>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d106      	bne.n	800072e <fsm_manual_run+0x256>
						blinkind_led_traffic_x();
 8000720:	f000 fa5e 	bl	8000be0 <blinkind_led_traffic_x>
						blinkind_led_traffic_y();
 8000724:	f000 fa8e 	bl	8000c44 <blinkind_led_traffic_y>
						setTimer6(50);
 8000728:	2032      	movs	r0, #50	@ 0x32
 800072a:	f000 fc67 	bl	8000ffc <setTimer6>
					}
					if(is_button_pressed(0) == 1){
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fd56 	bl	80001e0 <is_button_pressed>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d112      	bne.n	8000760 <fsm_manual_run+0x288>
						clearTimer6();
 800073a:	f000 fc99 	bl	8001070 <clearTimer6>
						status = INIT;
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <fsm_manual_run+0x2f4>)
 8000740:	220e      	movs	r2, #14
 8000742:	601a      	str	r2, [r3, #0]
						status1 = INIT1;
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <fsm_manual_run+0x2f8>)
 8000746:	220f      	movs	r2, #15
 8000748:	601a      	str	r2, [r3, #0]
						setTimer6(50);
 800074a:	2032      	movs	r0, #50	@ 0x32
 800074c:	f000 fc56 	bl	8000ffc <setTimer6>

						lcd_init();
 8000750:	f000 f952 	bl	80009f8 <lcd_init>
						HAL_Delay(25);
 8000754:	2019      	movs	r0, #25
 8000756:	f000 fea5 	bl	80014a4 <HAL_Delay>

						mode = NORMAL_MODE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <fsm_manual_run+0x2f0>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]




					}
					if(is_button_pressed(1) == 1){
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fd3d 	bl	80001e0 <is_button_pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d110      	bne.n	800078e <fsm_manual_run+0x2b6>
						buffer_duration_time = (buffer_duration_time + 100) % 10000;
 800076c:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <fsm_manual_run+0x324>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000774:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <fsm_manual_run+0x33c>)
 8000776:	fb83 1302 	smull	r1, r3, r3, r2
 800077a:	1319      	asrs	r1, r3, #12
 800077c:	17d3      	asrs	r3, r2, #31
 800077e:	1acb      	subs	r3, r1, r3
 8000780:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000784:	fb01 f303 	mul.w	r3, r1, r3
 8000788:	1ad3      	subs	r3, r2, r3
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <fsm_manual_run+0x324>)
 800078c:	6013      	str	r3, [r2, #0]

					}
					if(is_button_pressed(2) == 1){
 800078e:	2002      	movs	r0, #2
 8000790:	f7ff fd26 	bl	80001e0 <is_button_pressed>
 8000794:	4603      	mov	r3, r0
 8000796:	2b01      	cmp	r3, #1
 8000798:	f040 80af 	bne.w	80008fa <fsm_manual_run+0x422>
						duration_time_of_AUTO_GREEN = buffer_duration_time;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <fsm_manual_run+0x324>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1e      	ldr	r2, [pc, #120]	@ (800081c <fsm_manual_run+0x344>)
 80007a2:	6013      	str	r3, [r2, #0]
						if(duration_time_of_AUTO_RED != duration_time_of_AUTO_GREEN + duration_time_of_AUTO_YELLOW){
 80007a4:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <fsm_manual_run+0x344>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <fsm_manual_run+0x338>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	441a      	add	r2, r3
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <fsm_manual_run+0x320>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	f000 80a1 	beq.w	80008fa <fsm_manual_run+0x422>
							duration_time_of_AUTO_RED = duration_time_of_AUTO_GREEN + duration_time_of_AUTO_YELLOW;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <fsm_manual_run+0x344>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <fsm_manual_run+0x338>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <fsm_manual_run+0x320>)
 80007c4:	6013      	str	r3, [r2, #0]
						}
					}

			break;
 80007c6:	e098      	b.n	80008fa <fsm_manual_run+0x422>
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	20000124 	.word	0x20000124
 80007d0:	20000128 	.word	0x20000128
 80007d4:	200001d0 	.word	0x200001d0
 80007d8:	51eb851f 	.word	0x51eb851f
 80007dc:	08003d2c 	.word	0x08003d2c
 80007e0:	200000c4 	.word	0x200000c4
 80007e4:	200001d4 	.word	0x200001d4
 80007e8:	200000e4 	.word	0x200000e4
 80007ec:	08003d30 	.word	0x08003d30
 80007f0:	08003d38 	.word	0x08003d38
 80007f4:	40010c00 	.word	0x40010c00
 80007f8:	20000014 	.word	0x20000014
 80007fc:	20000020 	.word	0x20000020
 8000800:	20000104 	.word	0x20000104
 8000804:	08003d40 	.word	0x08003d40
 8000808:	08003d50 	.word	0x08003d50
 800080c:	200001f0 	.word	0x200001f0
 8000810:	20000018 	.word	0x20000018
 8000814:	68db8bad 	.word	0x68db8bad
 8000818:	08003d58 	.word	0x08003d58
 800081c:	2000001c 	.word	0x2000001c
//			update_2_led_7_seg_buffer_right(buffer_duration_time/100);




			sprintf(buffer, "%d ", buffer_duration_time/100);
 8000820:	4b38      	ldr	r3, [pc, #224]	@ (8000904 <fsm_manual_run+0x42c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a38      	ldr	r2, [pc, #224]	@ (8000908 <fsm_manual_run+0x430>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	1152      	asrs	r2, r2, #5
 800082c:	17db      	asrs	r3, r3, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	461a      	mov	r2, r3
 8000832:	4936      	ldr	r1, [pc, #216]	@ (800090c <fsm_manual_run+0x434>)
 8000834:	4836      	ldr	r0, [pc, #216]	@ (8000910 <fsm_manual_run+0x438>)
 8000836:	f002 fdbd 	bl	80033b4 <siprintf>


			lcd_goto_XY(1, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2001      	movs	r0, #1
 800083e:	f000 f925 	bl	8000a8c <lcd_goto_XY>
			lcd_send_string("Mode3:MAN_YELLOW");
 8000842:	4834      	ldr	r0, [pc, #208]	@ (8000914 <fsm_manual_run+0x43c>)
 8000844:	f000 f906 	bl	8000a54 <lcd_send_string>


			lcd_goto_XY(2, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2002      	movs	r0, #2
 800084c:	f000 f91e 	bl	8000a8c <lcd_goto_XY>
			lcd_send_string("Time");
 8000850:	4831      	ldr	r0, [pc, #196]	@ (8000918 <fsm_manual_run+0x440>)
 8000852:	f000 f8ff 	bl	8000a54 <lcd_send_string>


			lcd_goto_XY(2, 8);
 8000856:	2108      	movs	r1, #8
 8000858:	2002      	movs	r0, #2
 800085a:	f000 f917 	bl	8000a8c <lcd_goto_XY>

			lcd_send_string(buffer);
 800085e:	482c      	ldr	r0, [pc, #176]	@ (8000910 <fsm_manual_run+0x438>)
 8000860:	f000 f8f8 	bl	8000a54 <lcd_send_string>





			if(timer6_flag == 1){
 8000864:	4b2d      	ldr	r3, [pc, #180]	@ (800091c <fsm_manual_run+0x444>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d106      	bne.n	800087a <fsm_manual_run+0x3a2>
				blinkind_led_traffic_x();
 800086c:	f000 f9b8 	bl	8000be0 <blinkind_led_traffic_x>
				blinkind_led_traffic_y();
 8000870:	f000 f9e8 	bl	8000c44 <blinkind_led_traffic_y>
				setTimer6(50);
 8000874:	2032      	movs	r0, #50	@ 0x32
 8000876:	f000 fbc1 	bl	8000ffc <setTimer6>
			}
			if(is_button_pressed(0) == 1){
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff fcb0 	bl	80001e0 <is_button_pressed>
 8000880:	4603      	mov	r3, r0
 8000882:	2b01      	cmp	r3, #1
 8000884:	d111      	bne.n	80008aa <fsm_manual_run+0x3d2>
				clearTimer6();
 8000886:	f000 fbf3 	bl	8001070 <clearTimer6>
				status = AUTO_GREEN;
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <fsm_manual_run+0x448>)
 800088c:	220c      	movs	r2, #12
 800088e:	601a      	str	r2, [r3, #0]
				status1 = AUTO_GREEN;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <fsm_manual_run+0x44c>)
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
				setTimer6(50);
 8000896:	2032      	movs	r0, #50	@ 0x32
 8000898:	f000 fbb0 	bl	8000ffc <setTimer6>
				buffer_duration_time = duration_time_of_AUTO_GREEN;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <fsm_manual_run+0x450>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <fsm_manual_run+0x42c>)
 80008a2:	6013      	str	r3, [r2, #0]
				mode = MAN_GREEN_MODE;
 80008a4:	4b21      	ldr	r3, [pc, #132]	@ (800092c <fsm_manual_run+0x454>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	601a      	str	r2, [r3, #0]



			}
			if(is_button_pressed(1) == 1){
 80008aa:	2001      	movs	r0, #1
 80008ac:	f7ff fc98 	bl	80001e0 <is_button_pressed>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d110      	bne.n	80008d8 <fsm_manual_run+0x400>
				buffer_duration_time = (buffer_duration_time + 100) % 10000;
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <fsm_manual_run+0x42c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <fsm_manual_run+0x458>)
 80008c0:	fb83 1302 	smull	r1, r3, r3, r2
 80008c4:	1319      	asrs	r1, r3, #12
 80008c6:	17d3      	asrs	r3, r2, #31
 80008c8:	1acb      	subs	r3, r1, r3
 80008ca:	f242 7110 	movw	r1, #10000	@ 0x2710
 80008ce:	fb01 f303 	mul.w	r3, r1, r3
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <fsm_manual_run+0x42c>)
 80008d6:	6013      	str	r3, [r2, #0]

			}
			if(is_button_pressed(2) == 1){
 80008d8:	2002      	movs	r0, #2
 80008da:	f7ff fc81 	bl	80001e0 <is_button_pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10c      	bne.n	80008fe <fsm_manual_run+0x426>
				duration_time_of_AUTO_YELLOW = buffer_duration_time;
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <fsm_manual_run+0x42c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <fsm_manual_run+0x45c>)
 80008ea:	6013      	str	r3, [r2, #0]
			}

			break;
 80008ec:	e007      	b.n	80008fe <fsm_manual_run+0x426>
		default:
			break;
 80008ee:	bf00      	nop
 80008f0:	e006      	b.n	8000900 <fsm_manual_run+0x428>
			break;
 80008f2:	bf00      	nop
 80008f4:	e004      	b.n	8000900 <fsm_manual_run+0x428>
			break;
 80008f6:	bf00      	nop
 80008f8:	e002      	b.n	8000900 <fsm_manual_run+0x428>
			break;
 80008fa:	bf00      	nop
 80008fc:	e000      	b.n	8000900 <fsm_manual_run+0x428>
			break;
 80008fe:	bf00      	nop
	}
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000020 	.word	0x20000020
 8000908:	51eb851f 	.word	0x51eb851f
 800090c:	08003d2c 	.word	0x08003d2c
 8000910:	20000104 	.word	0x20000104
 8000914:	08003d6c 	.word	0x08003d6c
 8000918:	08003d50 	.word	0x08003d50
 800091c:	200001f0 	.word	0x200001f0
 8000920:	20000124 	.word	0x20000124
 8000924:	20000128 	.word	0x20000128
 8000928:	2000001c 	.word	0x2000001c
 800092c:	2000012c 	.word	0x2000012c
 8000930:	68db8bad 	.word	0x68db8bad
 8000934:	20000018 	.word	0x20000018

08000938 <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);           						// Lấy 4 bit cao của lệnh
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f023 030f 	bic.w	r3, r3, #15
 8000948:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);							// Lấy 4 bit thấp của lệnh và dịch sang vị trí cao
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	011b      	lsls	r3, r3, #4
 800094e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0				//-> gửi phần 4 bit cao với EN = 1
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	f043 030c 	orr.w	r3, r3, #12
 8000956:	b2db      	uxtb	r3, r3
 8000958:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0				//-> xác nhận lệnh đã gửi xong
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	b2db      	uxtb	r3, r3
 8000962:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0				//-> gửi phần 4 bit thấp với EN = 1
 8000964:	7bbb      	ldrb	r3, [r7, #14]
 8000966:	f043 030c 	orr.w	r3, r3, #12
 800096a:	b2db      	uxtb	r3, r3
 800096c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0				//-> xác nhận lệnh đã gửi xong
 800096e:	7bbb      	ldrb	r3, [r7, #14]
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	72fb      	strb	r3, [r7, #11]
//	data_t[0] = data_u | 0x0D;  // en=1, rs=1
//	data_t[1] = data_u | 0x09;  // en=0, rs=1
//	data_t[2] = data_l | 0x0D;  // en=1, rs=1
//	data_t[3] = data_l | 0x09;  // en=0, rs=1

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000978:	f107 0208 	add.w	r2, r7, #8
 800097c:	2364      	movs	r3, #100	@ 0x64
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2304      	movs	r3, #4
 8000982:	2142      	movs	r1, #66	@ 0x42
 8000984:	4803      	ldr	r0, [pc, #12]	@ (8000994 <lcd_send_cmd+0x5c>)
 8000986:	f001 f9cf 	bl	8001d28 <HAL_I2C_Master_Transmit>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000130 	.word	0x20000130

08000998 <lcd_send_data>:
		EN = 1 (bit thứ 2 từ phải sang).

 */

void lcd_send_data (char data)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f023 030f 	bic.w	r3, r3, #15
 80009a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	f043 030d 	orr.w	r3, r3, #13
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80009ba:	7bfb      	ldrb	r3, [r7, #15]
 80009bc:	f043 0309 	orr.w	r3, r3, #9
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	f043 030d 	orr.w	r3, r3, #13
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80009ce:	7bbb      	ldrb	r3, [r7, #14]
 80009d0:	f043 0309 	orr.w	r3, r3, #9
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80009d8:	f107 0208 	add.w	r2, r7, #8
 80009dc:	2364      	movs	r3, #100	@ 0x64
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	2304      	movs	r3, #4
 80009e2:	2142      	movs	r1, #66	@ 0x42
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <lcd_send_data+0x5c>)
 80009e6:	f001 f99f 	bl	8001d28 <HAL_I2C_Master_Transmit>
}
 80009ea:	bf00      	nop
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000130 	.word	0x20000130

080009f8 <lcd_init>:

void lcd_init (void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80009fc:	2033      	movs	r0, #51	@ 0x33
 80009fe:	f7ff ff9b 	bl	8000938 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000a02:	2032      	movs	r0, #50	@ 0x32
 8000a04:	f7ff ff98 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a08:	2032      	movs	r0, #50	@ 0x32
 8000a0a:	f000 fd4b 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000a0e:	2028      	movs	r0, #40	@ 0x28
 8000a10:	f7ff ff92 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a14:	2032      	movs	r0, #50	@ 0x32
 8000a16:	f000 fd45 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ff8c 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a20:	2032      	movs	r0, #50	@ 0x32
 8000a22:	f000 fd3f 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000a26:	2006      	movs	r0, #6
 8000a28:	f7ff ff86 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a2c:	2032      	movs	r0, #50	@ 0x32
 8000a2e:	f000 fd39 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000a32:	200c      	movs	r0, #12
 8000a34:	f7ff ff80 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a38:	2032      	movs	r0, #50	@ 0x32
 8000a3a:	f000 fd33 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff ff7a 	bl	8000938 <lcd_send_cmd>
	HAL_Delay(50);
 8000a44:	2032      	movs	r0, #50	@ 0x32
 8000a46:	f000 fd2d 	bl	80014a4 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000a4a:	2080      	movs	r0, #128	@ 0x80
 8000a4c:	f7ff ff74 	bl	8000938 <lcd_send_cmd>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000a5c:	e006      	b.n	8000a6c <lcd_send_string+0x18>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	1c5a      	adds	r2, r3, #1
 8000a62:	607a      	str	r2, [r7, #4]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff96 	bl	8000998 <lcd_send_data>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1f4      	bne.n	8000a5e <lcd_send_string+0xa>
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ff58 	bl	8000938 <lcd_send_cmd>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d108      	bne.n	8000aae <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	337f      	adds	r3, #127	@ 0x7f
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	e008      	b.n	8000ac0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3340      	adds	r3, #64	@ 0x40
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff38 	bl	8000938 <lcd_send_cmd>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <state_init>:
#include "led_states.h"
#include "global.h"



void state_init(){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
//	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
//	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D3_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <state_init+0x1c>)
 8000ada:	f000 ffb0 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4802      	ldr	r0, [pc, #8]	@ (8000aec <state_init+0x1c>)
 8000ae4:	f000 ffab 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40010c00 	.word	0x40010c00

08000af0 <state_red>:

void state_red(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 0);
//	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
//	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D3_Pin, 1);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2108      	movs	r1, #8
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <state_red+0x1c>)
 8000afa:	f000 ffa0 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2120      	movs	r1, #32
 8000b02:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <state_red+0x1c>)
 8000b04:	f000 ff9b 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40010c00 	.word	0x40010c00

08000b10 <state_green>:

void state_green(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
//	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 0);
//	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D3_Pin, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2108      	movs	r1, #8
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <state_green+0x1c>)
 8000b1a:	f000 ff90 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2120      	movs	r1, #32
 8000b22:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <state_green+0x1c>)
 8000b24:	f000 ff8b 	bl	8001a3e <HAL_GPIO_WritePin>


}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40010c00 	.word	0x40010c00

08000b30 <state_yellow>:

void state_yellow(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRx_GPIO_Port, LRx_Pin, 1);
//	HAL_GPIO_WritePin(LGx_GPIO_Port, LGx_Pin, 1);
//	HAL_GPIO_WritePin(LYx_GPIO_Port, LYx_Pin, 0);
	HAL_GPIO_WritePin(GPIOB, D3_Pin, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2108      	movs	r1, #8
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <state_yellow+0x1c>)
 8000b3a:	f000 ff80 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D4_Pin, 1);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	4802      	ldr	r0, [pc, #8]	@ (8000b4c <state_yellow+0x1c>)
 8000b44:	f000 ff7b 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40010c00 	.word	0x40010c00

08000b50 <state_init1>:


void state_init1(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
//	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
//	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D5_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <state_init1+0x20>)
 8000b5a:	f000 ff70 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b64:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <state_init1+0x20>)
 8000b66:	f000 ff6a 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40010c00 	.word	0x40010c00

08000b74 <state_red1>:


void state_red1(){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 0);
//	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
//	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D5_Pin, 1);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2110      	movs	r1, #16
 8000b7c:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <state_red1+0x20>)
 8000b7e:	f000 ff5e 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 1);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <state_red1+0x20>)
 8000b8a:	f000 ff58 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <state_green1>:
void state_green1(){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
//	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 0);
//	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 1);
	HAL_GPIO_WritePin(GPIOB, D5_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2110      	movs	r1, #16
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <state_green1+0x20>)
 8000ba2:	f000 ff4c 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <state_green1+0x20>)
 8000bae:	f000 ff46 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <state_yellow1>:
void state_yellow1(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
//	HAL_GPIO_WritePin(LRy_GPIO_Port, LRy_Pin, 1);
//	HAL_GPIO_WritePin(LGy_GPIO_Port, LGy_Pin, 1);
//	HAL_GPIO_WritePin(LYy_GPIO_Port, LYy_Pin, 0);
	HAL_GPIO_WritePin(GPIOB, D5_Pin, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <state_yellow1+0x20>)
 8000bc6:	f000 ff3a 	bl	8001a3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D6_Pin, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <state_yellow1+0x20>)
 8000bd2:	f000 ff34 	bl	8001a3e <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <blinkind_led_traffic_x>:
//		default:
//			break;
//	}
//}

void blinkind_led_traffic_x(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	switch(status){
 8000be4:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <blinkind_led_traffic_x+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b0d      	cmp	r3, #13
 8000bea:	d00f      	beq.n	8000c0c <blinkind_led_traffic_x+0x2c>
 8000bec:	2b0d      	cmp	r3, #13
 8000bee:	dc21      	bgt.n	8000c34 <blinkind_led_traffic_x+0x54>
 8000bf0:	2b0b      	cmp	r3, #11
 8000bf2:	d002      	beq.n	8000bfa <blinkind_led_traffic_x+0x1a>
 8000bf4:	2b0c      	cmp	r3, #12
 8000bf6:	d013      	beq.n	8000c20 <blinkind_led_traffic_x+0x40>
//			HAL_GPIO_TogglePin(GPIOA, LGx_Pin);
			HAL_GPIO_WritePin(GPIOB, D4_Pin, 0);
			HAL_GPIO_TogglePin(GPIOB, D3_Pin);
			break;
		default:
			break;
 8000bf8:	e01c      	b.n	8000c34 <blinkind_led_traffic_x+0x54>
			HAL_GPIO_TogglePin(GPIOB, D3_Pin);
 8000bfa:	2108      	movs	r1, #8
 8000bfc:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000bfe:	f000 ff36 	bl	8001a6e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, D4_Pin);
 8000c02:	2120      	movs	r1, #32
 8000c04:	480e      	ldr	r0, [pc, #56]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000c06:	f000 ff32 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c0a:	e014      	b.n	8000c36 <blinkind_led_traffic_x+0x56>
			HAL_GPIO_WritePin(GPIOB, D3_Pin, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2108      	movs	r1, #8
 8000c10:	480b      	ldr	r0, [pc, #44]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000c12:	f000 ff14 	bl	8001a3e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, D4_Pin);
 8000c16:	2120      	movs	r1, #32
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000c1a:	f000 ff28 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c1e:	e00a      	b.n	8000c36 <blinkind_led_traffic_x+0x56>
			HAL_GPIO_WritePin(GPIOB, D4_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000c26:	f000 ff0a 	bl	8001a3e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOB, D3_Pin);
 8000c2a:	2108      	movs	r1, #8
 8000c2c:	4804      	ldr	r0, [pc, #16]	@ (8000c40 <blinkind_led_traffic_x+0x60>)
 8000c2e:	f000 ff1e 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c32:	e000      	b.n	8000c36 <blinkind_led_traffic_x+0x56>
			break;
 8000c34:	bf00      	nop
		}
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000124 	.word	0x20000124
 8000c40:	40010c00 	.word	0x40010c00

08000c44 <blinkind_led_traffic_y>:

void blinkind_led_traffic_y(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	switch(status1){
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <blinkind_led_traffic_y+0x60>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b0d      	cmp	r3, #13
 8000c4e:	d010      	beq.n	8000c72 <blinkind_led_traffic_y+0x2e>
 8000c50:	2b0d      	cmp	r3, #13
 8000c52:	dc24      	bgt.n	8000c9e <blinkind_led_traffic_y+0x5a>
 8000c54:	2b0b      	cmp	r3, #11
 8000c56:	d002      	beq.n	8000c5e <blinkind_led_traffic_y+0x1a>
 8000c58:	2b0c      	cmp	r3, #12
 8000c5a:	d015      	beq.n	8000c88 <blinkind_led_traffic_y+0x44>
//				HAL_GPIO_TogglePin(GPIOA, LGy_Pin);
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0);
				HAL_GPIO_TogglePin(GPIOB, D5_Pin);
			break;
			default:
			break;
 8000c5c:	e01f      	b.n	8000c9e <blinkind_led_traffic_y+0x5a>
				HAL_GPIO_TogglePin(GPIOB, D5_Pin);
 8000c5e:	2110      	movs	r1, #16
 8000c60:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c62:	f000 ff04 	bl	8001a6e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, D6_Pin);
 8000c66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c6a:	480f      	ldr	r0, [pc, #60]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c6c:	f000 feff 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c70:	e016      	b.n	8000ca0 <blinkind_led_traffic_y+0x5c>
				HAL_GPIO_WritePin(GPIOB, D5_Pin, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2110      	movs	r1, #16
 8000c76:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c78:	f000 fee1 	bl	8001a3e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, D6_Pin);
 8000c7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c80:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c82:	f000 fef4 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c86:	e00b      	b.n	8000ca0 <blinkind_led_traffic_y+0x5c>
				HAL_GPIO_WritePin(GPIOB, D6_Pin, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8e:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c90:	f000 fed5 	bl	8001a3e <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOB, D5_Pin);
 8000c94:	2110      	movs	r1, #16
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <blinkind_led_traffic_y+0x64>)
 8000c98:	f000 fee9 	bl	8001a6e <HAL_GPIO_TogglePin>
			break;
 8000c9c:	e000      	b.n	8000ca0 <blinkind_led_traffic_y+0x5c>
			break;
 8000c9e:	bf00      	nop
		}
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000128 	.word	0x20000128
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 fb96 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f810 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f8ca 	bl	8000e50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f87c 	bl	8000db8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000cc0:	f000 f84c 	bl	8000d5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000cc4:	4803      	ldr	r0, [pc, #12]	@ (8000cd4 <main+0x28>)
 8000cc6:	f001 ffd3 	bl	8002c70 <HAL_TIM_Base_Start_IT>
//	  lcd_send_string("Timer Interrupt");


  while (1)
  {
	  fsm_manual_run();
 8000cca:	f7ff fc05 	bl	80004d8 <fsm_manual_run>
  {
 8000cce:	bf00      	nop
 8000cd0:	e7fb      	b.n	8000cca <main+0x1e>
 8000cd2:	bf00      	nop
 8000cd4:	20000184 	.word	0x20000184

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b090      	sub	sp, #64	@ 0x40
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	2228      	movs	r2, #40	@ 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 fb84 	bl	80033f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d0e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0318 	add.w	r3, r7, #24
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fb5d 	bl	80023d8 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d24:	f000 f916 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2102      	movs	r1, #2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fdca 	bl	80028dc <HAL_RCC_ClockConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d4e:	f000 f901 	bl	8000f54 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3740      	adds	r7, #64	@ 0x40
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d62:	4a13      	ldr	r2, [pc, #76]	@ (8000db0 <MX_I2C1_Init+0x54>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d68:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <MX_I2C1_Init+0x58>)
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d80:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_I2C1_Init+0x50>)
 8000d9a:	f000 fe81 	bl	8001aa0 <HAL_I2C_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da4:	f000 f8d6 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000130 	.word	0x20000130
 8000db0:	40005400 	.word	0x40005400
 8000db4:	000186a0 	.word	0x000186a0

08000db8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000dd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000dde:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000dec:	2209      	movs	r2, #9
 8000dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dfc:	4813      	ldr	r0, [pc, #76]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000dfe:	f001 fee7 	bl	8002bd0 <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e08:	f000 f8a4 	bl	8000f54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480c      	ldr	r0, [pc, #48]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000e1a:	f002 f86b 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 f896 	bl	8000f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <MX_TIM2_Init+0x94>)
 8000e36:	f002 fa4d 	bl	80032d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e40:	f000 f888 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000184 	.word	0x20000184

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b31      	ldr	r3, [pc, #196]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	4a30      	ldr	r2, [pc, #192]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e6a:	f043 0308 	orr.w	r3, r3, #8
 8000e6e:	6193      	str	r3, [r2, #24]
 8000e70:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	f003 0308 	and.w	r3, r3, #8
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a2a      	ldr	r2, [pc, #168]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a24      	ldr	r2, [pc, #144]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <MX_GPIO_Init+0xdc>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8000eb2:	481f      	ldr	r0, [pc, #124]	@ (8000f30 <MX_GPIO_Init+0xe0>)
 8000eb4:	f000 fdc3 	bl	8001a3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000eb8:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4817      	ldr	r0, [pc, #92]	@ (8000f30 <MX_GPIO_Init+0xe0>)
 8000ed2:	f000 fc19 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2_Pin */
  GPIO_InitStruct.Pin = A2_Pin;
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4812      	ldr	r0, [pc, #72]	@ (8000f34 <MX_GPIO_Init+0xe4>)
 8000eea:	f000 fc0d 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_Pin */
  GPIO_InitStruct.Pin = A0_Pin;
 8000eee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_GPIO_Init+0xe8>)
 8000f04:	f000 fc00 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : A1_Pin */
  GPIO_InitStruct.Pin = A1_Pin;
 8000f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A1_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 0310 	add.w	r3, r7, #16
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <MX_GPIO_Init+0xe8>)
 8000f1e:	f000 fbf3 	bl	8001708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010c00 	.word	0x40010c00
 8000f34:	40011000 	.word	0x40011000
 8000f38:	40010800 	.word	0x40010800

08000f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	timer_run();
 8000f44:	f000 f8a4 	bl	8001090 <timer_run>
	button_reading();
 8000f48:	f7ff f968 	bl	800021c <button_reading>
 }
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <Error_Handler+0x8>

08000f60 <setTimer0>:
int timer0_counter = 0, timer1_counter = 0, timer2_counter = 0, timer3_counter = 0, timer4_counter, timer5_counter, timer6_counter;
int timer0_flag = 0, timer1_flag = 0, timer2_flag = 0, timer3_flag = 0, timer4_flag = 0, timer5_flag = 0, timer6_flag = 0;
int TIMER_CYCLE = 1;


void setTimer0(int duration) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <setTimer0+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	@ (8000f8c <setTimer0+0x2c>)
 8000f74:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <setTimer0+0x30>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000024 	.word	0x20000024
 8000f8c:	200001cc 	.word	0x200001cc
 8000f90:	200001e0 	.word	0x200001e0

08000f94 <setTimer1>:
void setTimer1(int duration) {
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    timer1_counter = duration / TIMER_CYCLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <setTimer1+0x28>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fa6:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <setTimer1+0x2c>)
 8000fa8:	6013      	str	r3, [r2, #0]
    timer1_flag = 0;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <setTimer1+0x30>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000024 	.word	0x20000024
 8000fc0:	200001d0 	.word	0x200001d0
 8000fc4:	200001e4 	.word	0x200001e4

08000fc8 <setTimer2>:
void setTimer2(int duration) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <setTimer2+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fda:	4a06      	ldr	r2, [pc, #24]	@ (8000ff4 <setTimer2+0x2c>)
 8000fdc:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <setTimer2+0x30>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000024 	.word	0x20000024
 8000ff4:	200001d4 	.word	0x200001d4
 8000ff8:	200001e8 	.word	0x200001e8

08000ffc <setTimer6>:
}
//void setTimer5(int duration){
//	timer5_counter = duration / TIMER_CYCLE;
//	timer5_flag = 0;
//}
void setTimer6(int duration){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	timer6_counter = duration / TIMER_CYCLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <setTimer6+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	fb92 f3f3 	sdiv	r3, r2, r3
 800100e:	4a06      	ldr	r2, [pc, #24]	@ (8001028 <setTimer6+0x2c>)
 8001010:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <setTimer6+0x30>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000024 	.word	0x20000024
 8001028:	200001dc 	.word	0x200001dc
 800102c:	200001f0 	.word	0x200001f0

08001030 <clearTimer1>:

//void clearTimer0(){
//	timer0_counter = 0;
//	timer0_flag = 0;
//}
void clearTimer1(){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	timer1_counter = 0;
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <clearTimer1+0x18>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
	timer1_flag = 0;
 800103a:	4b04      	ldr	r3, [pc, #16]	@ (800104c <clearTimer1+0x1c>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	200001d0 	.word	0x200001d0
 800104c:	200001e4 	.word	0x200001e4

08001050 <clearTimer2>:
void clearTimer2(){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	timer2_counter = 0;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <clearTimer2+0x18>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
	timer2_flag = 0;
 800105a:	4b04      	ldr	r3, [pc, #16]	@ (800106c <clearTimer2+0x1c>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	200001d4 	.word	0x200001d4
 800106c:	200001e8 	.word	0x200001e8

08001070 <clearTimer6>:
//}
//void clearTimer5(){
//	timer5_counter = 0;
//	timer5_flag = 0;
//}
void clearTimer6(){
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
	timer6_counter = 0;
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <clearTimer6+0x18>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	timer6_flag = 0;
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <clearTimer6+0x1c>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	200001dc 	.word	0x200001dc
 800108c:	200001f0 	.word	0x200001f0

08001090 <timer_run>:



void timer_run() {
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <timer_run+0xac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd0b      	ble.n	80010b4 <timer_run+0x24>
        timer0_counter--;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <timer_run+0xac>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	4a26      	ldr	r2, [pc, #152]	@ (800113c <timer_run+0xac>)
 80010a4:	6013      	str	r3, [r2, #0]
        if (timer0_counter == 0) timer0_flag = 1;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <timer_run+0xac>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <timer_run+0x24>
 80010ae:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <timer_run+0xb0>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
    }
    if (timer1_counter > 0) {
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <timer_run+0xb4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dd0b      	ble.n	80010d4 <timer_run+0x44>
        timer1_counter--;
 80010bc:	4b21      	ldr	r3, [pc, #132]	@ (8001144 <timer_run+0xb4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <timer_run+0xb4>)
 80010c4:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0) timer1_flag = 1;
 80010c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <timer_run+0xb4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <timer_run+0x44>
 80010ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <timer_run+0xb8>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
    }
    if (timer2_counter > 0) {
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <timer_run+0xbc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	dd0b      	ble.n	80010f4 <timer_run+0x64>
        timer2_counter--;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <timer_run+0xbc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <timer_run+0xbc>)
 80010e4:	6013      	str	r3, [r2, #0]
        if (timer2_counter == 0) timer2_flag = 1;
 80010e6:	4b19      	ldr	r3, [pc, #100]	@ (800114c <timer_run+0xbc>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <timer_run+0x64>
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <timer_run+0xc0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
//        timer3_counter--;
//        if (timer3_counter == 0){
//        	timer3_flag = 1;
//        }
//    }
    if (timer4_counter > 0) {
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <timer_run+0xc4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	dd0b      	ble.n	8001114 <timer_run+0x84>
        timer4_counter--;
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <timer_run+0xc4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <timer_run+0xc4>)
 8001104:	6013      	str	r3, [r2, #0]
        if (timer4_counter == 0){
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <timer_run+0xc4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <timer_run+0x84>
        	timer4_flag = 1;
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <timer_run+0xc8>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
//        timer5_counter--;
//        if (timer5_counter == 0){
//        	timer5_flag = 1;
//        }
//    }
    if (timer6_counter > 0) {
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <timer_run+0xcc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd0b      	ble.n	8001134 <timer_run+0xa4>
        timer6_counter--;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <timer_run+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a0e      	ldr	r2, [pc, #56]	@ (800115c <timer_run+0xcc>)
 8001124:	6013      	str	r3, [r2, #0]
        if (timer6_counter == 0){
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <timer_run+0xcc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <timer_run+0xa4>
        	timer6_flag = 1;
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <timer_run+0xd0>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]
        }
    }

}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	200001cc 	.word	0x200001cc
 8001140:	200001e0 	.word	0x200001e0
 8001144:	200001d0 	.word	0x200001d0
 8001148:	200001e4 	.word	0x200001e4
 800114c:	200001d4 	.word	0x200001d4
 8001150:	200001e8 	.word	0x200001e8
 8001154:	200001d8 	.word	0x200001d8
 8001158:	200001ec 	.word	0x200001ec
 800115c:	200001dc 	.word	0x200001dc
 8001160:	200001f0 	.word	0x200001f0

08001164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_MspInit+0x5c>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	4a14      	ldr	r2, [pc, #80]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6193      	str	r3, [r2, #24]
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800118c:	61d3      	str	r3, [r2, #28]
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_MspInit+0x5c>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800119a:	4b0a      	ldr	r3, [pc, #40]	@ (80011c4 <HAL_MspInit+0x60>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_MspInit+0x60>)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000

080011c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_I2C_MspInit+0x90>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d132      	bne.n	800124e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <HAL_I2C_MspInit+0x94>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a1b      	ldr	r2, [pc, #108]	@ (800125c <HAL_I2C_MspInit+0x94>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b19      	ldr	r3, [pc, #100]	@ (800125c <HAL_I2C_MspInit+0x94>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001200:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001206:	2312      	movs	r3, #18
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4812      	ldr	r0, [pc, #72]	@ (8001260 <HAL_I2C_MspInit+0x98>)
 8001216:	f000 fa77 	bl	8001708 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_I2C_MspInit+0x9c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001230:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_I2C_MspInit+0x9c>)
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_I2C_MspInit+0x94>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_I2C_MspInit+0x94>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_I2C_MspInit+0x94>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	40021000 	.word	0x40021000
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40010000 	.word	0x40010000

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f000 f9ff 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f000 fa18 	bl	80016d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <NMI_Handler+0x4>

080012b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <MemManage_Handler+0x4>

080012c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f8b4 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM2_IRQHandler+0x10>)
 800130e:	f001 fd01 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000184 	.word	0x20000184

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	@ (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f002 f85a 	bl	8003404 <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20005000 	.word	0x20005000
 800137c:	00000400 	.word	0x00000400
 8001380:	200001f4 	.word	0x200001f4
 8001384:	20000348 	.word	0x20000348

08001388 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001394:	f7ff fff8 	bl	8001388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480b      	ldr	r0, [pc, #44]	@ (80013c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139a:	490c      	ldr	r1, [pc, #48]	@ (80013cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b0:	4c09      	ldr	r4, [pc, #36]	@ (80013d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013be:	f002 f827 	bl	8003410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff fc73 	bl	8000cac <main>
  bx lr
 80013c6:	4770      	bx	lr
  ldr r0, =_sdata
 80013c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013cc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80013d0:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 80013d4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80013d8:	20000344 	.word	0x20000344

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>
	...

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_Init+0x28>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_Init+0x28>)
 80013ea:	f043 0310 	orr.w	r3, r3, #16
 80013ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f0:	2003      	movs	r0, #3
 80013f2:	f000 f947 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f6:	200f      	movs	r0, #15
 80013f8:	f000 f808 	bl	800140c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013fc:	f7ff feb2 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <HAL_InitTick+0x54>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_InitTick+0x58>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	fbb3 f3f1 	udiv	r3, r3, r1
 8001426:	fbb2 f3f3 	udiv	r3, r2, r3
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f95f 	bl	80016ee <HAL_SYSTICK_Config>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00e      	b.n	8001458 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0f      	cmp	r3, #15
 800143e:	d80a      	bhi.n	8001456 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f000 f927 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800144c:	4a06      	ldr	r2, [pc, #24]	@ (8001468 <HAL_InitTick+0x5c>)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
 8001454:	e000      	b.n	8001458 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000028 	.word	0x20000028
 8001464:	20000030 	.word	0x20000030
 8001468:	2000002c 	.word	0x2000002c

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x1c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x20>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a03      	ldr	r2, [pc, #12]	@ (800148c <HAL_IncTick+0x20>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000030 	.word	0x20000030
 800148c:	200001f8 	.word	0x200001f8

08001490 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b02      	ldr	r3, [pc, #8]	@ (80014a0 <HAL_GetTick+0x10>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	200001f8 	.word	0x200001f8

080014a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ac:	f7ff fff0 	bl	8001490 <HAL_GetTick>
 80014b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014bc:	d005      	beq.n	80014ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <HAL_Delay+0x44>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ca:	bf00      	nop
 80014cc:	f7ff ffe0 	bl	8001490 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8f7      	bhi.n	80014cc <HAL_Delay+0x28>
  {
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000030 	.word	0x20000030

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4906      	ldr	r1, [pc, #24]	@ (8001584 <__NVIC_EnableIRQ+0x34>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff90 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff2d 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff42 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff90 	bl	80015dc <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5f 	bl	8001588 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff35 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	@ 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e169      	b.n	80019f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800171c:	2201      	movs	r2, #1
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8158 	bne.w	80019ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a9a      	ldr	r2, [pc, #616]	@ (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05e      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001744:	4a98      	ldr	r2, [pc, #608]	@ (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d875      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800174a:	4a98      	ldr	r2, [pc, #608]	@ (80019ac <HAL_GPIO_Init+0x2a4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d058      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001750:	4a96      	ldr	r2, [pc, #600]	@ (80019ac <HAL_GPIO_Init+0x2a4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d86f      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001756:	4a96      	ldr	r2, [pc, #600]	@ (80019b0 <HAL_GPIO_Init+0x2a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d052      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 800175c:	4a94      	ldr	r2, [pc, #592]	@ (80019b0 <HAL_GPIO_Init+0x2a8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d869      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001762:	4a94      	ldr	r2, [pc, #592]	@ (80019b4 <HAL_GPIO_Init+0x2ac>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04c      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001768:	4a92      	ldr	r2, [pc, #584]	@ (80019b4 <HAL_GPIO_Init+0x2ac>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d863      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800176e:	4a92      	ldr	r2, [pc, #584]	@ (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d046      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001774:	4a90      	ldr	r2, [pc, #576]	@ (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d85d      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d82a      	bhi.n	80017d4 <HAL_GPIO_Init+0xcc>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d859      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001782:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <HAL_GPIO_Init+0x80>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001803 	.word	0x08001803
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001831 	.word	0x08001831
 8001798:	08001837 	.word	0x08001837
 800179c:	08001837 	.word	0x08001837
 80017a0:	08001837 	.word	0x08001837
 80017a4:	08001837 	.word	0x08001837
 80017a8:	08001837 	.word	0x08001837
 80017ac:	08001837 	.word	0x08001837
 80017b0:	08001837 	.word	0x08001837
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001837 	.word	0x08001837
 80017bc:	08001837 	.word	0x08001837
 80017c0:	08001837 	.word	0x08001837
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	4a79      	ldr	r2, [pc, #484]	@ (80019bc <HAL_GPIO_Init+0x2b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e029      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e024      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01f      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e01a      	b.n	8001838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e013      	b.n	8001838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e009      	b.n	8001838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e003      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x130>
          break;
 8001836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	@ 0xff
 800183c:	d801      	bhi.n	8001842 <HAL_GPIO_Init+0x13a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_Init+0x13e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	@ 0xff
 800184c:	d802      	bhi.n	8001854 <HAL_GPIO_Init+0x14c>
 800184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x152>
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	3b08      	subs	r3, #8
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	210f      	movs	r1, #15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b1 	beq.w	80019ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a4c      	ldr	r2, [pc, #304]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b4a      	ldr	r3, [pc, #296]	@ (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a0:	4a48      	ldr	r2, [pc, #288]	@ (80019c4 <HAL_GPIO_Init+0x2bc>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a40      	ldr	r2, [pc, #256]	@ (80019c8 <HAL_GPIO_Init+0x2c0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d013      	beq.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3f      	ldr	r2, [pc, #252]	@ (80019cc <HAL_GPIO_Init+0x2c4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	@ (80019d0 <HAL_GPIO_Init+0x2c8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1e4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3d      	ldr	r2, [pc, #244]	@ (80019d4 <HAL_GPIO_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1e0>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f4:	2300      	movs	r3, #0
 80018f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001906:	492f      	ldr	r1, [pc, #188]	@ (80019c4 <HAL_GPIO_Init+0x2bc>)
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001920:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	492c      	ldr	r1, [pc, #176]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192e:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4928      	ldr	r1, [pc, #160]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001948:	4b23      	ldr	r3, [pc, #140]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	4922      	ldr	r1, [pc, #136]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	60cb      	str	r3, [r1, #12]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001956:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	491e      	ldr	r1, [pc, #120]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4918      	ldr	r1, [pc, #96]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800197e:	4b16      	ldr	r3, [pc, #88]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4914      	ldr	r1, [pc, #80]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001998:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	490e      	ldr	r1, [pc, #56]	@ (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
 80019a4:	e021      	b.n	80019ea <HAL_GPIO_Init+0x2e2>
 80019a6:	bf00      	nop
 80019a8:	10320000 	.word	0x10320000
 80019ac:	10310000 	.word	0x10310000
 80019b0:	10220000 	.word	0x10220000
 80019b4:	10210000 	.word	0x10210000
 80019b8:	10120000 	.word	0x10120000
 80019bc:	10110000 	.word	0x10110000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40011400 	.word	0x40011400
 80019d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <HAL_GPIO_Init+0x304>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <HAL_GPIO_Init+0x304>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f ae8e 	bne.w	800171c <HAL_GPIO_Init+0x14>
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	372c      	adds	r7, #44	@ 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d002      	beq.n	8001a2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e001      	b.n	8001a32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	807b      	strh	r3, [r7, #2]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4e:	787b      	ldrb	r3, [r7, #1]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a5a:	e003      	b.n	8001a64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	041a      	lsls	r2, r3, #16
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	611a      	str	r2, [r3, #16]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b085      	sub	sp, #20
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a80:	887a      	ldrh	r2, [r7, #2]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	887b      	ldrh	r3, [r7, #2]
 8001a8e:	400b      	ands	r3, r1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e12b      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fb7e 	bl	80011c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	@ 0x24
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b04:	f001 f832 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a81      	ldr	r2, [pc, #516]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d807      	bhi.n	8001b24 <HAL_I2C_Init+0x84>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a80      	ldr	r2, [pc, #512]	@ (8001d18 <HAL_I2C_Init+0x278>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e006      	b.n	8001b32 <HAL_I2C_Init+0x92>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a7d      	ldr	r2, [pc, #500]	@ (8001d1c <HAL_I2C_Init+0x27c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a78      	ldr	r2, [pc, #480]	@ (8001d20 <HAL_I2C_Init+0x280>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a6a      	ldr	r2, [pc, #424]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d802      	bhi.n	8001b74 <HAL_I2C_Init+0xd4>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	e009      	b.n	8001b88 <HAL_I2C_Init+0xe8>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <HAL_I2C_Init+0x284>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	3301      	adds	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	495c      	ldr	r1, [pc, #368]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d819      	bhi.n	8001bdc <HAL_I2C_Init+0x13c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_I2C_Init+0x138>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e59      	subs	r1, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	e051      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e04f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_I2C_Init+0x168>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e012      	b.n	8001c2e <HAL_I2C_Init+0x18e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Init+0x196>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <HAL_I2C_Init+0x1bc>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001caa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6911      	ldr	r1, [r2, #16]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	000186a0 	.word	0x000186a0
 8001d18:	001e847f 	.word	0x001e847f
 8001d1c:	003d08ff 	.word	0x003d08ff
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	461a      	mov	r2, r3
 8001d34:	460b      	mov	r3, r1
 8001d36:	817b      	strh	r3, [r7, #10]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff fba8 	bl	8001490 <HAL_GetTick>
 8001d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	f040 80e0 	bne.w	8001f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2319      	movs	r3, #25
 8001d56:	2201      	movs	r2, #1
 8001d58:	4970      	ldr	r1, [pc, #448]	@ (8001f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f964 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
 8001d68:	e0d3      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2C_Master_Transmit+0x50>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0cc      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d007      	beq.n	8001d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2221      	movs	r2, #33	@ 0x21
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2210      	movs	r2, #16
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	893a      	ldrh	r2, [r7, #8]
 8001dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4a50      	ldr	r2, [pc, #320]	@ (8001f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8001dde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f89c 	bl	8001f24 <I2C_MasterRequestWrite>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e08d      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e0c:	e066      	b.n	8001edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa22 	bl	800225c <I2C_WaitOnTXEFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d107      	bne.n	8001e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d11b      	bne.n	8001eb0 <HAL_I2C_Master_Transmit+0x188>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d017      	beq.n	8001eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	6a39      	ldr	r1, [r7, #32]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fa19 	bl	80022ec <I2C_WaitOnBTFFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d107      	bne.n	8001ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e01a      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d194      	bne.n	8001e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e000      	b.n	8001f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	00100002 	.word	0x00100002
 8001f20:	ffff0000 	.word	0xffff0000

08001f24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d006      	beq.n	8001f4e <I2C_MasterRequestWrite+0x2a>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d003      	beq.n	8001f4e <I2C_MasterRequestWrite+0x2a>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f4c:	d108      	bne.n	8001f60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e00b      	b.n	8001f78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	2b12      	cmp	r3, #18
 8001f66:	d107      	bne.n	8001f78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f84f 	bl	8002028 <I2C_WaitOnFlagUntilTimeout>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f9e:	d103      	bne.n	8001fa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e035      	b.n	8002018 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fb4:	d108      	bne.n	8001fc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fb6:	897b      	ldrh	r3, [r7, #10]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	e01b      	b.n	8002000 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fc8:	897b      	ldrh	r3, [r7, #10]
 8001fca:	11db      	asrs	r3, r3, #7
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 0306 	and.w	r3, r3, #6
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f063 030f 	orn	r3, r3, #15
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	490e      	ldr	r1, [pc, #56]	@ (8002020 <I2C_MasterRequestWrite+0xfc>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 f898 	bl	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e010      	b.n	8002018 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ff6:	897b      	ldrh	r3, [r7, #10]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4907      	ldr	r1, [pc, #28]	@ (8002024 <I2C_MasterRequestWrite+0x100>)
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f888 	bl	800211c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	00010008 	.word	0x00010008
 8002024:	00010002 	.word	0x00010002

08002028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	4613      	mov	r3, r2
 8002036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002038:	e048      	b.n	80020cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d044      	beq.n	80020cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff fa25 	bl	8001490 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d302      	bcc.n	8002058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d139      	bne.n	80020cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0c1b      	lsrs	r3, r3, #16
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	43da      	mvns	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	4013      	ands	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	461a      	mov	r2, r3
 800207c:	e00c      	b.n	8002098 <I2C_WaitOnFlagUntilTimeout+0x70>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	43da      	mvns	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	4013      	ands	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	429a      	cmp	r2, r3
 800209c:	d116      	bne.n	80020cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	f043 0220 	orr.w	r2, r3, #32
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e023      	b.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0c1b      	lsrs	r3, r3, #16
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d10d      	bne.n	80020f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	43da      	mvns	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	4013      	ands	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	e00c      	b.n	800210c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	43da      	mvns	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d093      	beq.n	800203a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800212a:	e071      	b.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800213a:	d123      	bne.n	8002184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e067      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d041      	beq.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218c:	f7ff f980 	bl	8001490 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d302      	bcc.n	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d136      	bne.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d10c      	bne.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	43da      	mvns	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4013      	ands	r3, r2
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	bf14      	ite	ne
 80021be:	2301      	movne	r3, #1
 80021c0:	2300      	moveq	r3, #0
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e00b      	b.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	43da      	mvns	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d016      	beq.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0220 	orr.w	r2, r3, #32
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e021      	b.n	8002254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10c      	bne.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	43da      	mvns	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	4013      	ands	r3, r2
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf14      	ite	ne
 800222c:	2301      	movne	r3, #1
 800222e:	2300      	moveq	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e00b      	b.n	800224c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	f47f af6d 	bne.w	800212c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002268:	e034      	b.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f886 	bl	800237c <I2C_IsAcknowledgeFailed>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e034      	b.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d028      	beq.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002282:	f7ff f905 	bl	8001490 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	d302      	bcc.n	8002298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11d      	bne.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a2:	2b80      	cmp	r3, #128	@ 0x80
 80022a4:	d016      	beq.n	80022d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f043 0220 	orr.w	r2, r3, #32
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e007      	b.n	80022e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022de:	2b80      	cmp	r3, #128	@ 0x80
 80022e0:	d1c3      	bne.n	800226a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022f8:	e034      	b.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f83e 	bl	800237c <I2C_IsAcknowledgeFailed>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e034      	b.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d028      	beq.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002312:	f7ff f8bd 	bl	8001490 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d302      	bcc.n	8002328 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d11d      	bne.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b04      	cmp	r3, #4
 8002334:	d016      	beq.n	8002364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e007      	b.n	8002374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b04      	cmp	r3, #4
 8002370:	d1c3      	bne.n	80022fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002392:	d11b      	bne.n	80023cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800239c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e272      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8087 	beq.w	8002506 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f8:	4b92      	ldr	r3, [pc, #584]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 030c 	and.w	r3, r3, #12
 8002400:	2b04      	cmp	r3, #4
 8002402:	d00c      	beq.n	800241e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002404:	4b8f      	ldr	r3, [pc, #572]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d112      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
 8002410:	4b8c      	ldr	r3, [pc, #560]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b89      	ldr	r3, [pc, #548]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d06c      	beq.n	8002504 <HAL_RCC_OscConfig+0x12c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d168      	bne.n	8002504 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e24c      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x76>
 8002440:	4b80      	ldr	r3, [pc, #512]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a7f      	ldr	r2, [pc, #508]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e02e      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b7b      	ldr	r3, [pc, #492]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a7a      	ldr	r2, [pc, #488]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b78      	ldr	r3, [pc, #480]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a77      	ldr	r2, [pc, #476]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002468:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0xbc>
 800247a:	4b72      	ldr	r3, [pc, #456]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a71      	ldr	r2, [pc, #452]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6f      	ldr	r3, [pc, #444]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6e      	ldr	r2, [pc, #440]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xd4>
 8002494:	4b6b      	ldr	r3, [pc, #428]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a6a      	ldr	r2, [pc, #424]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a67      	ldr	r2, [pc, #412]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe ffec 	bl	8001490 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe ffe8 	bl	8001490 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e200      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xe4>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe ffd8 	bl	8001490 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe ffd4 	bl	8001490 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	@ 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1ec      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b53      	ldr	r3, [pc, #332]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x10c>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002512:	4b4c      	ldr	r3, [pc, #304]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251e:	4b49      	ldr	r3, [pc, #292]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x18c>
 800252a:	4b46      	ldr	r3, [pc, #280]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x176>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1c0      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3d      	ldr	r3, [pc, #244]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4939      	ldr	r1, [pc, #228]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b36      	ldr	r3, [pc, #216]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe ff8d 	bl	8001490 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe ff89 	bl	8001490 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1a1      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4927      	ldr	r1, [pc, #156]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <HAL_RCC_OscConfig+0x270>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b4:	f7fe ff6c 	bl	8001490 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe ff68 	bl	8001490 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e180      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d03a      	beq.n	800265c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d019      	beq.n	8002622 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b17      	ldr	r3, [pc, #92]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f4:	f7fe ff4c 	bl	8001490 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe ff48 	bl	8001490 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e160      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_RCC_OscConfig+0x26c>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800261a:	2001      	movs	r0, #1
 800261c:	f000 faba 	bl	8002b94 <RCC_Delay>
 8002620:	e01c      	b.n	800265c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HAL_RCC_OscConfig+0x274>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe ff32 	bl	8001490 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262e:	e00f      	b.n	8002650 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002630:	f7fe ff2e 	bl	8001490 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d908      	bls.n	8002650 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e146      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000
 8002648:	42420000 	.word	0x42420000
 800264c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002650:	4b92      	ldr	r3, [pc, #584]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e9      	bne.n	8002630 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80a6 	beq.w	80027b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b8b      	ldr	r3, [pc, #556]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b88      	ldr	r3, [pc, #544]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4a87      	ldr	r2, [pc, #540]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	61d3      	str	r3, [r2, #28]
 8002686:	4b85      	ldr	r3, [pc, #532]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002696:	4b82      	ldr	r3, [pc, #520]	@ (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d118      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a2:	4b7f      	ldr	r3, [pc, #508]	@ (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7e      	ldr	r2, [pc, #504]	@ (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ae:	f7fe feef 	bl	8001490 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe feeb 	bl	8001490 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b64      	cmp	r3, #100	@ 0x64
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e103      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c8:	4b75      	ldr	r3, [pc, #468]	@ (80028a0 <HAL_RCC_OscConfig+0x4c8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x312>
 80026dc:	4b6f      	ldr	r3, [pc, #444]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a6e      	ldr	r2, [pc, #440]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	e02d      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x334>
 80026f2:	4b6a      	ldr	r3, [pc, #424]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	4a69      	ldr	r2, [pc, #420]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	6213      	str	r3, [r2, #32]
 80026fe:	4b67      	ldr	r3, [pc, #412]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4a66      	ldr	r2, [pc, #408]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	6213      	str	r3, [r2, #32]
 800270a:	e01c      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d10c      	bne.n	800272e <HAL_RCC_OscConfig+0x356>
 8002714:	4b61      	ldr	r3, [pc, #388]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a60      	ldr	r2, [pc, #384]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	4b5e      	ldr	r3, [pc, #376]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a5d      	ldr	r2, [pc, #372]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6213      	str	r3, [r2, #32]
 800272c:	e00b      	b.n	8002746 <HAL_RCC_OscConfig+0x36e>
 800272e:	4b5b      	ldr	r3, [pc, #364]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a5a      	ldr	r2, [pc, #360]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	6213      	str	r3, [r2, #32]
 800273a:	4b58      	ldr	r3, [pc, #352]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4a57      	ldr	r2, [pc, #348]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d015      	beq.n	800277a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274e:	f7fe fe9f 	bl	8001490 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fe9b 	bl	8001490 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0b1      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ee      	beq.n	8002756 <HAL_RCC_OscConfig+0x37e>
 8002778:	e014      	b.n	80027a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7fe fe89 	bl	8001490 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002782:	f7fe fe85 	bl	8001490 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e09b      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	4b40      	ldr	r3, [pc, #256]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b3c      	ldr	r3, [pc, #240]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	4a3b      	ldr	r2, [pc, #236]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8087 	beq.w	80028ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c0:	4b36      	ldr	r3, [pc, #216]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 030c 	and.w	r3, r3, #12
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d061      	beq.n	8002890 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d146      	bne.n	8002862 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d4:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027da:	f7fe fe59 	bl	8001490 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fe55 	bl	8001490 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e06d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002808:	d108      	bne.n	800281c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4921      	ldr	r1, [pc, #132]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800281c:	4b1f      	ldr	r3, [pc, #124]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a19      	ldr	r1, [r3, #32]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	430b      	orrs	r3, r1
 800282e:	491b      	ldr	r1, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002830:	4313      	orrs	r3, r2
 8002832:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe fe29 	bl	8001490 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe fe25 	bl	8001490 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e03d      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x46a>
 8002860:	e035      	b.n	80028ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b10      	ldr	r3, [pc, #64]	@ (80028a4 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe fe12 	bl	8001490 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe fe0e 	bl	8001490 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e026      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_OscConfig+0x4c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f0      	bne.n	8002870 <HAL_RCC_OscConfig+0x498>
 800288e:	e01e      	b.n	80028ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e019      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
 800289c:	40021000 	.word	0x40021000
 80028a0:	40007000 	.word	0x40007000
 80028a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_OscConfig+0x500>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0d0      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d910      	bls.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b67      	ldr	r3, [pc, #412]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4965      	ldr	r1, [pc, #404]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a58      	ldr	r2, [pc, #352]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002942:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a52      	ldr	r2, [pc, #328]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800295a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d040      	beq.n	80029fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d115      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d107      	bne.n	80029aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	4b41      	ldr	r3, [pc, #260]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e073      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	4b3d      	ldr	r3, [pc, #244]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06b      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ba:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4936      	ldr	r1, [pc, #216]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029cc:	f7fe fd60 	bl	8001490 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d4:	f7fe fd5c 	bl	8001490 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e053      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ea:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 020c 	and.w	r2, r3, #12
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1eb      	bne.n	80029d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029fc:	4b27      	ldr	r3, [pc, #156]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d210      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 0207 	bic.w	r2, r3, #7
 8002a12:	4922      	ldr	r1, [pc, #136]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	@ (8002a9c <HAL_RCC_ClockConfig+0x1c0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1cc>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <HAL_RCC_ClockConfig+0x1d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fcbe 	bl	800140c <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	08003d80 	.word	0x08003d80
 8002aa8:	20000028 	.word	0x20000028
 8002aac:	2000002c 	.word	0x2000002c

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d002      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x30>
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d003      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x36>
 8002ade:	e027      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae0:	4b19      	ldr	r3, [pc, #100]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae2:	613b      	str	r3, [r7, #16]
      break;
 8002ae4:	e027      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	4a17      	ldr	r2, [pc, #92]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afe:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	0c5b      	lsrs	r3, r3, #17
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	4a11      	ldr	r2, [pc, #68]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a0d      	ldr	r2, [pc, #52]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	613b      	str	r3, [r7, #16]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b32:	613b      	str	r3, [r7, #16]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	693b      	ldr	r3, [r7, #16]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	371c      	adds	r7, #28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
 8002b48:	007a1200 	.word	0x007a1200
 8002b4c:	08003d98 	.word	0x08003d98
 8002b50:	08003da8 	.word	0x08003da8
 8002b54:	003d0900 	.word	0x003d0900

08002b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	@ (8002b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000028 	.word	0x20000028

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b70:	f7ff fff2 	bl	8002b58 <HAL_RCC_GetHCLKFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	4903      	ldr	r1, [pc, #12]	@ (8002b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08003d90 	.word	0x08003d90

08002b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <RCC_Delay+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <RCC_Delay+0x38>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	0a5b      	lsrs	r3, r3, #9
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bb0:	bf00      	nop
  }
  while (Delay --);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1e5a      	subs	r2, r3, #1
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f9      	bne.n	8002bb0 <RCC_Delay+0x1c>
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	20000028 	.word	0x20000028
 8002bcc:	10624dd3 	.word	0x10624dd3

08002bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e041      	b.n	8002c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fb36 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 fa5c 	bl	80030cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d001      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e03a      	b.n	8002cfe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	@ (8002d08 <HAL_TIM_Base_Start_IT+0x98>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x58>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cb2:	d009      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x58>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <HAL_TIM_Base_Start_IT+0x9c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x58>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <HAL_TIM_Base_Start_IT+0xa0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d111      	bne.n	8002cec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d010      	beq.n	8002cfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	e007      	b.n	8002cfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	40000400 	.word	0x40000400
 8002d10:	40000800 	.word	0x40000800

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f998 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f98b 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f99a 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f972 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f965 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f974 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f94c 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f93f 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f94e 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f926 	bl	8003094 <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f919 	bl	8003082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f928 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f85e 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa7f 	bl	80033a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00c      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d007      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8f8 	bl	80030b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00c      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0220 	mvn.w	r2, #32
 8002ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa52 	bl	8003390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_TIM_ConfigClockSource+0x1c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0b4      	b.n	800307a <HAL_TIM_ConfigClockSource+0x186>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f48:	d03e      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f4e:	f200 8087 	bhi.w	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f56:	f000 8086 	beq.w	8003066 <HAL_TIM_ConfigClockSource+0x172>
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f5e:	d87f      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b70      	cmp	r3, #112	@ 0x70
 8002f62:	d01a      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0xa6>
 8002f64:	2b70      	cmp	r3, #112	@ 0x70
 8002f66:	d87b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f68:	2b60      	cmp	r3, #96	@ 0x60
 8002f6a:	d050      	beq.n	800300e <HAL_TIM_ConfigClockSource+0x11a>
 8002f6c:	2b60      	cmp	r3, #96	@ 0x60
 8002f6e:	d877      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f70:	2b50      	cmp	r3, #80	@ 0x50
 8002f72:	d03c      	beq.n	8002fee <HAL_TIM_ConfigClockSource+0xfa>
 8002f74:	2b50      	cmp	r3, #80	@ 0x50
 8002f76:	d873      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f78:	2b40      	cmp	r3, #64	@ 0x40
 8002f7a:	d058      	beq.n	800302e <HAL_TIM_ConfigClockSource+0x13a>
 8002f7c:	2b40      	cmp	r3, #64	@ 0x40
 8002f7e:	d86f      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f80:	2b30      	cmp	r3, #48	@ 0x30
 8002f82:	d064      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f84:	2b30      	cmp	r3, #48	@ 0x30
 8002f86:	d86b      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d060      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d867      	bhi.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d05c      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d05a      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x15a>
 8002f98:	e062      	b.n	8003060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002faa:	f000 f974 	bl	8003296 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	609a      	str	r2, [r3, #8]
      break;
 8002fc6:	e04f      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fd8:	f000 f95d 	bl	8003296 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fea:	609a      	str	r2, [r3, #8]
      break;
 8002fec:	e03c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f000 f8d4 	bl	80031a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2150      	movs	r1, #80	@ 0x50
 8003006:	4618      	mov	r0, r3
 8003008:	f000 f92b 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 800300c:	e02c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800301a:	461a      	mov	r2, r3
 800301c:	f000 f8f2 	bl	8003204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2160      	movs	r1, #96	@ 0x60
 8003026:	4618      	mov	r0, r3
 8003028:	f000 f91b 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 800302c:	e01c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800303a:	461a      	mov	r2, r3
 800303c:	f000 f8b4 	bl	80031a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2140      	movs	r1, #64	@ 0x40
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f90b 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 800304c:	e00c      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f000 f902 	bl	8003262 <TIM_ITRx_SetConfig>
      break;
 800305e:	e003      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
      break;
 8003064:	e000      	b.n	8003068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2f      	ldr	r2, [pc, #188]	@ (800319c <TIM_Base_SetConfig+0xd0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a2c      	ldr	r2, [pc, #176]	@ (80031a0 <TIM_Base_SetConfig+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x30>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a2b      	ldr	r2, [pc, #172]	@ (80031a4 <TIM_Base_SetConfig+0xd8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a22      	ldr	r2, [pc, #136]	@ (800319c <TIM_Base_SetConfig+0xd0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00b      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311c:	d007      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1f      	ldr	r2, [pc, #124]	@ (80031a0 <TIM_Base_SetConfig+0xd4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_Base_SetConfig+0x62>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1e      	ldr	r2, [pc, #120]	@ (80031a4 <TIM_Base_SetConfig+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d108      	bne.n	8003140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <TIM_Base_SetConfig+0xd0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d103      	bne.n	8003174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f023 0201 	bic.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	611a      	str	r2, [r3, #16]
  }
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800

080031a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0201 	bic.w	r2, r3, #1
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f023 030a 	bic.w	r3, r3, #10
 80031e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr

08003204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0210 	bic.w	r2, r3, #16
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	031b      	lsls	r3, r3, #12
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	621a      	str	r2, [r3, #32]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr

08003262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	f043 0307 	orr.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	021a      	lsls	r2, r3, #8
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	609a      	str	r2, [r3, #8]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e046      	b.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a16      	ldr	r2, [pc, #88]	@ (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003338:	d009      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a10      	ldr	r2, [pc, #64]	@ (800338c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800

08003390 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <siprintf>:
 80033b4:	b40e      	push	{r1, r2, r3}
 80033b6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80033ba:	b500      	push	{lr}
 80033bc:	b09c      	sub	sp, #112	@ 0x70
 80033be:	ab1d      	add	r3, sp, #116	@ 0x74
 80033c0:	9002      	str	r0, [sp, #8]
 80033c2:	9006      	str	r0, [sp, #24]
 80033c4:	9107      	str	r1, [sp, #28]
 80033c6:	9104      	str	r1, [sp, #16]
 80033c8:	4808      	ldr	r0, [pc, #32]	@ (80033ec <siprintf+0x38>)
 80033ca:	4909      	ldr	r1, [pc, #36]	@ (80033f0 <siprintf+0x3c>)
 80033cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80033d0:	9105      	str	r1, [sp, #20]
 80033d2:	6800      	ldr	r0, [r0, #0]
 80033d4:	a902      	add	r1, sp, #8
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	f000 f992 	bl	8003700 <_svfiprintf_r>
 80033dc:	2200      	movs	r2, #0
 80033de:	9b02      	ldr	r3, [sp, #8]
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	b01c      	add	sp, #112	@ 0x70
 80033e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e8:	b003      	add	sp, #12
 80033ea:	4770      	bx	lr
 80033ec:	20000034 	.word	0x20000034
 80033f0:	ffff0208 	.word	0xffff0208

080033f4 <memset>:
 80033f4:	4603      	mov	r3, r0
 80033f6:	4402      	add	r2, r0
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d100      	bne.n	80033fe <memset+0xa>
 80033fc:	4770      	bx	lr
 80033fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003402:	e7f9      	b.n	80033f8 <memset+0x4>

08003404 <__errno>:
 8003404:	4b01      	ldr	r3, [pc, #4]	@ (800340c <__errno+0x8>)
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000034 	.word	0x20000034

08003410 <__libc_init_array>:
 8003410:	b570      	push	{r4, r5, r6, lr}
 8003412:	2600      	movs	r6, #0
 8003414:	4d0c      	ldr	r5, [pc, #48]	@ (8003448 <__libc_init_array+0x38>)
 8003416:	4c0d      	ldr	r4, [pc, #52]	@ (800344c <__libc_init_array+0x3c>)
 8003418:	1b64      	subs	r4, r4, r5
 800341a:	10a4      	asrs	r4, r4, #2
 800341c:	42a6      	cmp	r6, r4
 800341e:	d109      	bne.n	8003434 <__libc_init_array+0x24>
 8003420:	f000 fc78 	bl	8003d14 <_init>
 8003424:	2600      	movs	r6, #0
 8003426:	4d0a      	ldr	r5, [pc, #40]	@ (8003450 <__libc_init_array+0x40>)
 8003428:	4c0a      	ldr	r4, [pc, #40]	@ (8003454 <__libc_init_array+0x44>)
 800342a:	1b64      	subs	r4, r4, r5
 800342c:	10a4      	asrs	r4, r4, #2
 800342e:	42a6      	cmp	r6, r4
 8003430:	d105      	bne.n	800343e <__libc_init_array+0x2e>
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	f855 3b04 	ldr.w	r3, [r5], #4
 8003438:	4798      	blx	r3
 800343a:	3601      	adds	r6, #1
 800343c:	e7ee      	b.n	800341c <__libc_init_array+0xc>
 800343e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003442:	4798      	blx	r3
 8003444:	3601      	adds	r6, #1
 8003446:	e7f2      	b.n	800342e <__libc_init_array+0x1e>
 8003448:	08003de0 	.word	0x08003de0
 800344c:	08003de0 	.word	0x08003de0
 8003450:	08003de0 	.word	0x08003de0
 8003454:	08003de4 	.word	0x08003de4

08003458 <__retarget_lock_acquire_recursive>:
 8003458:	4770      	bx	lr

0800345a <__retarget_lock_release_recursive>:
 800345a:	4770      	bx	lr

0800345c <_free_r>:
 800345c:	b538      	push	{r3, r4, r5, lr}
 800345e:	4605      	mov	r5, r0
 8003460:	2900      	cmp	r1, #0
 8003462:	d040      	beq.n	80034e6 <_free_r+0x8a>
 8003464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003468:	1f0c      	subs	r4, r1, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfb8      	it	lt
 800346e:	18e4      	addlt	r4, r4, r3
 8003470:	f000 f8de 	bl	8003630 <__malloc_lock>
 8003474:	4a1c      	ldr	r2, [pc, #112]	@ (80034e8 <_free_r+0x8c>)
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	b933      	cbnz	r3, 8003488 <_free_r+0x2c>
 800347a:	6063      	str	r3, [r4, #4]
 800347c:	6014      	str	r4, [r2, #0]
 800347e:	4628      	mov	r0, r5
 8003480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003484:	f000 b8da 	b.w	800363c <__malloc_unlock>
 8003488:	42a3      	cmp	r3, r4
 800348a:	d908      	bls.n	800349e <_free_r+0x42>
 800348c:	6820      	ldr	r0, [r4, #0]
 800348e:	1821      	adds	r1, r4, r0
 8003490:	428b      	cmp	r3, r1
 8003492:	bf01      	itttt	eq
 8003494:	6819      	ldreq	r1, [r3, #0]
 8003496:	685b      	ldreq	r3, [r3, #4]
 8003498:	1809      	addeq	r1, r1, r0
 800349a:	6021      	streq	r1, [r4, #0]
 800349c:	e7ed      	b.n	800347a <_free_r+0x1e>
 800349e:	461a      	mov	r2, r3
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b10b      	cbz	r3, 80034a8 <_free_r+0x4c>
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	d9fa      	bls.n	800349e <_free_r+0x42>
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	1850      	adds	r0, r2, r1
 80034ac:	42a0      	cmp	r0, r4
 80034ae:	d10b      	bne.n	80034c8 <_free_r+0x6c>
 80034b0:	6820      	ldr	r0, [r4, #0]
 80034b2:	4401      	add	r1, r0
 80034b4:	1850      	adds	r0, r2, r1
 80034b6:	4283      	cmp	r3, r0
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	d1e0      	bne.n	800347e <_free_r+0x22>
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4408      	add	r0, r1
 80034c2:	6010      	str	r0, [r2, #0]
 80034c4:	6053      	str	r3, [r2, #4]
 80034c6:	e7da      	b.n	800347e <_free_r+0x22>
 80034c8:	d902      	bls.n	80034d0 <_free_r+0x74>
 80034ca:	230c      	movs	r3, #12
 80034cc:	602b      	str	r3, [r5, #0]
 80034ce:	e7d6      	b.n	800347e <_free_r+0x22>
 80034d0:	6820      	ldr	r0, [r4, #0]
 80034d2:	1821      	adds	r1, r4, r0
 80034d4:	428b      	cmp	r3, r1
 80034d6:	bf01      	itttt	eq
 80034d8:	6819      	ldreq	r1, [r3, #0]
 80034da:	685b      	ldreq	r3, [r3, #4]
 80034dc:	1809      	addeq	r1, r1, r0
 80034de:	6021      	streq	r1, [r4, #0]
 80034e0:	6063      	str	r3, [r4, #4]
 80034e2:	6054      	str	r4, [r2, #4]
 80034e4:	e7cb      	b.n	800347e <_free_r+0x22>
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
 80034e8:	20000340 	.word	0x20000340

080034ec <sbrk_aligned>:
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4e0f      	ldr	r6, [pc, #60]	@ (800352c <sbrk_aligned+0x40>)
 80034f0:	460c      	mov	r4, r1
 80034f2:	6831      	ldr	r1, [r6, #0]
 80034f4:	4605      	mov	r5, r0
 80034f6:	b911      	cbnz	r1, 80034fe <sbrk_aligned+0x12>
 80034f8:	f000 fbaa 	bl	8003c50 <_sbrk_r>
 80034fc:	6030      	str	r0, [r6, #0]
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 fba5 	bl	8003c50 <_sbrk_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d103      	bne.n	8003512 <sbrk_aligned+0x26>
 800350a:	f04f 34ff 	mov.w	r4, #4294967295
 800350e:	4620      	mov	r0, r4
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	1cc4      	adds	r4, r0, #3
 8003514:	f024 0403 	bic.w	r4, r4, #3
 8003518:	42a0      	cmp	r0, r4
 800351a:	d0f8      	beq.n	800350e <sbrk_aligned+0x22>
 800351c:	1a21      	subs	r1, r4, r0
 800351e:	4628      	mov	r0, r5
 8003520:	f000 fb96 	bl	8003c50 <_sbrk_r>
 8003524:	3001      	adds	r0, #1
 8003526:	d1f2      	bne.n	800350e <sbrk_aligned+0x22>
 8003528:	e7ef      	b.n	800350a <sbrk_aligned+0x1e>
 800352a:	bf00      	nop
 800352c:	2000033c 	.word	0x2000033c

08003530 <_malloc_r>:
 8003530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003534:	1ccd      	adds	r5, r1, #3
 8003536:	f025 0503 	bic.w	r5, r5, #3
 800353a:	3508      	adds	r5, #8
 800353c:	2d0c      	cmp	r5, #12
 800353e:	bf38      	it	cc
 8003540:	250c      	movcc	r5, #12
 8003542:	2d00      	cmp	r5, #0
 8003544:	4606      	mov	r6, r0
 8003546:	db01      	blt.n	800354c <_malloc_r+0x1c>
 8003548:	42a9      	cmp	r1, r5
 800354a:	d904      	bls.n	8003556 <_malloc_r+0x26>
 800354c:	230c      	movs	r3, #12
 800354e:	6033      	str	r3, [r6, #0]
 8003550:	2000      	movs	r0, #0
 8003552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800362c <_malloc_r+0xfc>
 800355a:	f000 f869 	bl	8003630 <__malloc_lock>
 800355e:	f8d8 3000 	ldr.w	r3, [r8]
 8003562:	461c      	mov	r4, r3
 8003564:	bb44      	cbnz	r4, 80035b8 <_malloc_r+0x88>
 8003566:	4629      	mov	r1, r5
 8003568:	4630      	mov	r0, r6
 800356a:	f7ff ffbf 	bl	80034ec <sbrk_aligned>
 800356e:	1c43      	adds	r3, r0, #1
 8003570:	4604      	mov	r4, r0
 8003572:	d158      	bne.n	8003626 <_malloc_r+0xf6>
 8003574:	f8d8 4000 	ldr.w	r4, [r8]
 8003578:	4627      	mov	r7, r4
 800357a:	2f00      	cmp	r7, #0
 800357c:	d143      	bne.n	8003606 <_malloc_r+0xd6>
 800357e:	2c00      	cmp	r4, #0
 8003580:	d04b      	beq.n	800361a <_malloc_r+0xea>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	4639      	mov	r1, r7
 8003586:	4630      	mov	r0, r6
 8003588:	eb04 0903 	add.w	r9, r4, r3
 800358c:	f000 fb60 	bl	8003c50 <_sbrk_r>
 8003590:	4581      	cmp	r9, r0
 8003592:	d142      	bne.n	800361a <_malloc_r+0xea>
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	4630      	mov	r0, r6
 8003598:	1a6d      	subs	r5, r5, r1
 800359a:	4629      	mov	r1, r5
 800359c:	f7ff ffa6 	bl	80034ec <sbrk_aligned>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d03a      	beq.n	800361a <_malloc_r+0xea>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	442b      	add	r3, r5
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	f8d8 3000 	ldr.w	r3, [r8]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	bb62      	cbnz	r2, 800360c <_malloc_r+0xdc>
 80035b2:	f8c8 7000 	str.w	r7, [r8]
 80035b6:	e00f      	b.n	80035d8 <_malloc_r+0xa8>
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	1b52      	subs	r2, r2, r5
 80035bc:	d420      	bmi.n	8003600 <_malloc_r+0xd0>
 80035be:	2a0b      	cmp	r2, #11
 80035c0:	d917      	bls.n	80035f2 <_malloc_r+0xc2>
 80035c2:	1961      	adds	r1, r4, r5
 80035c4:	42a3      	cmp	r3, r4
 80035c6:	6025      	str	r5, [r4, #0]
 80035c8:	bf18      	it	ne
 80035ca:	6059      	strne	r1, [r3, #4]
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	bf08      	it	eq
 80035d0:	f8c8 1000 	streq.w	r1, [r8]
 80035d4:	5162      	str	r2, [r4, r5]
 80035d6:	604b      	str	r3, [r1, #4]
 80035d8:	4630      	mov	r0, r6
 80035da:	f000 f82f 	bl	800363c <__malloc_unlock>
 80035de:	f104 000b 	add.w	r0, r4, #11
 80035e2:	1d23      	adds	r3, r4, #4
 80035e4:	f020 0007 	bic.w	r0, r0, #7
 80035e8:	1ac2      	subs	r2, r0, r3
 80035ea:	bf1c      	itt	ne
 80035ec:	1a1b      	subne	r3, r3, r0
 80035ee:	50a3      	strne	r3, [r4, r2]
 80035f0:	e7af      	b.n	8003552 <_malloc_r+0x22>
 80035f2:	6862      	ldr	r2, [r4, #4]
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	bf0c      	ite	eq
 80035f8:	f8c8 2000 	streq.w	r2, [r8]
 80035fc:	605a      	strne	r2, [r3, #4]
 80035fe:	e7eb      	b.n	80035d8 <_malloc_r+0xa8>
 8003600:	4623      	mov	r3, r4
 8003602:	6864      	ldr	r4, [r4, #4]
 8003604:	e7ae      	b.n	8003564 <_malloc_r+0x34>
 8003606:	463c      	mov	r4, r7
 8003608:	687f      	ldr	r7, [r7, #4]
 800360a:	e7b6      	b.n	800357a <_malloc_r+0x4a>
 800360c:	461a      	mov	r2, r3
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	42a3      	cmp	r3, r4
 8003612:	d1fb      	bne.n	800360c <_malloc_r+0xdc>
 8003614:	2300      	movs	r3, #0
 8003616:	6053      	str	r3, [r2, #4]
 8003618:	e7de      	b.n	80035d8 <_malloc_r+0xa8>
 800361a:	230c      	movs	r3, #12
 800361c:	4630      	mov	r0, r6
 800361e:	6033      	str	r3, [r6, #0]
 8003620:	f000 f80c 	bl	800363c <__malloc_unlock>
 8003624:	e794      	b.n	8003550 <_malloc_r+0x20>
 8003626:	6005      	str	r5, [r0, #0]
 8003628:	e7d6      	b.n	80035d8 <_malloc_r+0xa8>
 800362a:	bf00      	nop
 800362c:	20000340 	.word	0x20000340

08003630 <__malloc_lock>:
 8003630:	4801      	ldr	r0, [pc, #4]	@ (8003638 <__malloc_lock+0x8>)
 8003632:	f7ff bf11 	b.w	8003458 <__retarget_lock_acquire_recursive>
 8003636:	bf00      	nop
 8003638:	20000338 	.word	0x20000338

0800363c <__malloc_unlock>:
 800363c:	4801      	ldr	r0, [pc, #4]	@ (8003644 <__malloc_unlock+0x8>)
 800363e:	f7ff bf0c 	b.w	800345a <__retarget_lock_release_recursive>
 8003642:	bf00      	nop
 8003644:	20000338 	.word	0x20000338

08003648 <__ssputs_r>:
 8003648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	461f      	mov	r7, r3
 800364e:	688e      	ldr	r6, [r1, #8]
 8003650:	4682      	mov	sl, r0
 8003652:	42be      	cmp	r6, r7
 8003654:	460c      	mov	r4, r1
 8003656:	4690      	mov	r8, r2
 8003658:	680b      	ldr	r3, [r1, #0]
 800365a:	d82d      	bhi.n	80036b8 <__ssputs_r+0x70>
 800365c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003660:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003664:	d026      	beq.n	80036b4 <__ssputs_r+0x6c>
 8003666:	6965      	ldr	r5, [r4, #20]
 8003668:	6909      	ldr	r1, [r1, #16]
 800366a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800366e:	eba3 0901 	sub.w	r9, r3, r1
 8003672:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003676:	1c7b      	adds	r3, r7, #1
 8003678:	444b      	add	r3, r9
 800367a:	106d      	asrs	r5, r5, #1
 800367c:	429d      	cmp	r5, r3
 800367e:	bf38      	it	cc
 8003680:	461d      	movcc	r5, r3
 8003682:	0553      	lsls	r3, r2, #21
 8003684:	d527      	bpl.n	80036d6 <__ssputs_r+0x8e>
 8003686:	4629      	mov	r1, r5
 8003688:	f7ff ff52 	bl	8003530 <_malloc_r>
 800368c:	4606      	mov	r6, r0
 800368e:	b360      	cbz	r0, 80036ea <__ssputs_r+0xa2>
 8003690:	464a      	mov	r2, r9
 8003692:	6921      	ldr	r1, [r4, #16]
 8003694:	f000 fafa 	bl	8003c8c <memcpy>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800369e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	6126      	str	r6, [r4, #16]
 80036a6:	444e      	add	r6, r9
 80036a8:	6026      	str	r6, [r4, #0]
 80036aa:	463e      	mov	r6, r7
 80036ac:	6165      	str	r5, [r4, #20]
 80036ae:	eba5 0509 	sub.w	r5, r5, r9
 80036b2:	60a5      	str	r5, [r4, #8]
 80036b4:	42be      	cmp	r6, r7
 80036b6:	d900      	bls.n	80036ba <__ssputs_r+0x72>
 80036b8:	463e      	mov	r6, r7
 80036ba:	4632      	mov	r2, r6
 80036bc:	4641      	mov	r1, r8
 80036be:	6820      	ldr	r0, [r4, #0]
 80036c0:	f000 faac 	bl	8003c1c <memmove>
 80036c4:	2000      	movs	r0, #0
 80036c6:	68a3      	ldr	r3, [r4, #8]
 80036c8:	1b9b      	subs	r3, r3, r6
 80036ca:	60a3      	str	r3, [r4, #8]
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	4433      	add	r3, r6
 80036d0:	6023      	str	r3, [r4, #0]
 80036d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d6:	462a      	mov	r2, r5
 80036d8:	f000 fae6 	bl	8003ca8 <_realloc_r>
 80036dc:	4606      	mov	r6, r0
 80036de:	2800      	cmp	r0, #0
 80036e0:	d1e0      	bne.n	80036a4 <__ssputs_r+0x5c>
 80036e2:	4650      	mov	r0, sl
 80036e4:	6921      	ldr	r1, [r4, #16]
 80036e6:	f7ff feb9 	bl	800345c <_free_r>
 80036ea:	230c      	movs	r3, #12
 80036ec:	f8ca 3000 	str.w	r3, [sl]
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036fa:	81a3      	strh	r3, [r4, #12]
 80036fc:	e7e9      	b.n	80036d2 <__ssputs_r+0x8a>
	...

08003700 <_svfiprintf_r>:
 8003700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003704:	4698      	mov	r8, r3
 8003706:	898b      	ldrh	r3, [r1, #12]
 8003708:	4607      	mov	r7, r0
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	460d      	mov	r5, r1
 800370e:	4614      	mov	r4, r2
 8003710:	b09d      	sub	sp, #116	@ 0x74
 8003712:	d510      	bpl.n	8003736 <_svfiprintf_r+0x36>
 8003714:	690b      	ldr	r3, [r1, #16]
 8003716:	b973      	cbnz	r3, 8003736 <_svfiprintf_r+0x36>
 8003718:	2140      	movs	r1, #64	@ 0x40
 800371a:	f7ff ff09 	bl	8003530 <_malloc_r>
 800371e:	6028      	str	r0, [r5, #0]
 8003720:	6128      	str	r0, [r5, #16]
 8003722:	b930      	cbnz	r0, 8003732 <_svfiprintf_r+0x32>
 8003724:	230c      	movs	r3, #12
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	b01d      	add	sp, #116	@ 0x74
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	2340      	movs	r3, #64	@ 0x40
 8003734:	616b      	str	r3, [r5, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	9309      	str	r3, [sp, #36]	@ 0x24
 800373a:	2320      	movs	r3, #32
 800373c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003740:	2330      	movs	r3, #48	@ 0x30
 8003742:	f04f 0901 	mov.w	r9, #1
 8003746:	f8cd 800c 	str.w	r8, [sp, #12]
 800374a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80038e4 <_svfiprintf_r+0x1e4>
 800374e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003752:	4623      	mov	r3, r4
 8003754:	469a      	mov	sl, r3
 8003756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375a:	b10a      	cbz	r2, 8003760 <_svfiprintf_r+0x60>
 800375c:	2a25      	cmp	r2, #37	@ 0x25
 800375e:	d1f9      	bne.n	8003754 <_svfiprintf_r+0x54>
 8003760:	ebba 0b04 	subs.w	fp, sl, r4
 8003764:	d00b      	beq.n	800377e <_svfiprintf_r+0x7e>
 8003766:	465b      	mov	r3, fp
 8003768:	4622      	mov	r2, r4
 800376a:	4629      	mov	r1, r5
 800376c:	4638      	mov	r0, r7
 800376e:	f7ff ff6b 	bl	8003648 <__ssputs_r>
 8003772:	3001      	adds	r0, #1
 8003774:	f000 80a7 	beq.w	80038c6 <_svfiprintf_r+0x1c6>
 8003778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800377a:	445a      	add	r2, fp
 800377c:	9209      	str	r2, [sp, #36]	@ 0x24
 800377e:	f89a 3000 	ldrb.w	r3, [sl]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 809f 	beq.w	80038c6 <_svfiprintf_r+0x1c6>
 8003788:	2300      	movs	r3, #0
 800378a:	f04f 32ff 	mov.w	r2, #4294967295
 800378e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003792:	f10a 0a01 	add.w	sl, sl, #1
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	9307      	str	r3, [sp, #28]
 800379a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800379e:	931a      	str	r3, [sp, #104]	@ 0x68
 80037a0:	4654      	mov	r4, sl
 80037a2:	2205      	movs	r2, #5
 80037a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a8:	484e      	ldr	r0, [pc, #312]	@ (80038e4 <_svfiprintf_r+0x1e4>)
 80037aa:	f000 fa61 	bl	8003c70 <memchr>
 80037ae:	9a04      	ldr	r2, [sp, #16]
 80037b0:	b9d8      	cbnz	r0, 80037ea <_svfiprintf_r+0xea>
 80037b2:	06d0      	lsls	r0, r2, #27
 80037b4:	bf44      	itt	mi
 80037b6:	2320      	movmi	r3, #32
 80037b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037bc:	0711      	lsls	r1, r2, #28
 80037be:	bf44      	itt	mi
 80037c0:	232b      	movmi	r3, #43	@ 0x2b
 80037c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037c6:	f89a 3000 	ldrb.w	r3, [sl]
 80037ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80037cc:	d015      	beq.n	80037fa <_svfiprintf_r+0xfa>
 80037ce:	4654      	mov	r4, sl
 80037d0:	2000      	movs	r0, #0
 80037d2:	f04f 0c0a 	mov.w	ip, #10
 80037d6:	9a07      	ldr	r2, [sp, #28]
 80037d8:	4621      	mov	r1, r4
 80037da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037de:	3b30      	subs	r3, #48	@ 0x30
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d94b      	bls.n	800387c <_svfiprintf_r+0x17c>
 80037e4:	b1b0      	cbz	r0, 8003814 <_svfiprintf_r+0x114>
 80037e6:	9207      	str	r2, [sp, #28]
 80037e8:	e014      	b.n	8003814 <_svfiprintf_r+0x114>
 80037ea:	eba0 0308 	sub.w	r3, r0, r8
 80037ee:	fa09 f303 	lsl.w	r3, r9, r3
 80037f2:	4313      	orrs	r3, r2
 80037f4:	46a2      	mov	sl, r4
 80037f6:	9304      	str	r3, [sp, #16]
 80037f8:	e7d2      	b.n	80037a0 <_svfiprintf_r+0xa0>
 80037fa:	9b03      	ldr	r3, [sp, #12]
 80037fc:	1d19      	adds	r1, r3, #4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9103      	str	r1, [sp, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfbb      	ittet	lt
 8003806:	425b      	neglt	r3, r3
 8003808:	f042 0202 	orrlt.w	r2, r2, #2
 800380c:	9307      	strge	r3, [sp, #28]
 800380e:	9307      	strlt	r3, [sp, #28]
 8003810:	bfb8      	it	lt
 8003812:	9204      	strlt	r2, [sp, #16]
 8003814:	7823      	ldrb	r3, [r4, #0]
 8003816:	2b2e      	cmp	r3, #46	@ 0x2e
 8003818:	d10a      	bne.n	8003830 <_svfiprintf_r+0x130>
 800381a:	7863      	ldrb	r3, [r4, #1]
 800381c:	2b2a      	cmp	r3, #42	@ 0x2a
 800381e:	d132      	bne.n	8003886 <_svfiprintf_r+0x186>
 8003820:	9b03      	ldr	r3, [sp, #12]
 8003822:	3402      	adds	r4, #2
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	9203      	str	r2, [sp, #12]
 800382a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800382e:	9305      	str	r3, [sp, #20]
 8003830:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80038e8 <_svfiprintf_r+0x1e8>
 8003834:	2203      	movs	r2, #3
 8003836:	4650      	mov	r0, sl
 8003838:	7821      	ldrb	r1, [r4, #0]
 800383a:	f000 fa19 	bl	8003c70 <memchr>
 800383e:	b138      	cbz	r0, 8003850 <_svfiprintf_r+0x150>
 8003840:	2240      	movs	r2, #64	@ 0x40
 8003842:	9b04      	ldr	r3, [sp, #16]
 8003844:	eba0 000a 	sub.w	r0, r0, sl
 8003848:	4082      	lsls	r2, r0
 800384a:	4313      	orrs	r3, r2
 800384c:	3401      	adds	r4, #1
 800384e:	9304      	str	r3, [sp, #16]
 8003850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003854:	2206      	movs	r2, #6
 8003856:	4825      	ldr	r0, [pc, #148]	@ (80038ec <_svfiprintf_r+0x1ec>)
 8003858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800385c:	f000 fa08 	bl	8003c70 <memchr>
 8003860:	2800      	cmp	r0, #0
 8003862:	d036      	beq.n	80038d2 <_svfiprintf_r+0x1d2>
 8003864:	4b22      	ldr	r3, [pc, #136]	@ (80038f0 <_svfiprintf_r+0x1f0>)
 8003866:	bb1b      	cbnz	r3, 80038b0 <_svfiprintf_r+0x1b0>
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	3307      	adds	r3, #7
 800386c:	f023 0307 	bic.w	r3, r3, #7
 8003870:	3308      	adds	r3, #8
 8003872:	9303      	str	r3, [sp, #12]
 8003874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003876:	4433      	add	r3, r6
 8003878:	9309      	str	r3, [sp, #36]	@ 0x24
 800387a:	e76a      	b.n	8003752 <_svfiprintf_r+0x52>
 800387c:	460c      	mov	r4, r1
 800387e:	2001      	movs	r0, #1
 8003880:	fb0c 3202 	mla	r2, ip, r2, r3
 8003884:	e7a8      	b.n	80037d8 <_svfiprintf_r+0xd8>
 8003886:	2300      	movs	r3, #0
 8003888:	f04f 0c0a 	mov.w	ip, #10
 800388c:	4619      	mov	r1, r3
 800388e:	3401      	adds	r4, #1
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	4620      	mov	r0, r4
 8003894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003898:	3a30      	subs	r2, #48	@ 0x30
 800389a:	2a09      	cmp	r2, #9
 800389c:	d903      	bls.n	80038a6 <_svfiprintf_r+0x1a6>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0c6      	beq.n	8003830 <_svfiprintf_r+0x130>
 80038a2:	9105      	str	r1, [sp, #20]
 80038a4:	e7c4      	b.n	8003830 <_svfiprintf_r+0x130>
 80038a6:	4604      	mov	r4, r0
 80038a8:	2301      	movs	r3, #1
 80038aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ae:	e7f0      	b.n	8003892 <_svfiprintf_r+0x192>
 80038b0:	ab03      	add	r3, sp, #12
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	462a      	mov	r2, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <_svfiprintf_r+0x1f4>)
 80038ba:	a904      	add	r1, sp, #16
 80038bc:	f3af 8000 	nop.w
 80038c0:	1c42      	adds	r2, r0, #1
 80038c2:	4606      	mov	r6, r0
 80038c4:	d1d6      	bne.n	8003874 <_svfiprintf_r+0x174>
 80038c6:	89ab      	ldrh	r3, [r5, #12]
 80038c8:	065b      	lsls	r3, r3, #25
 80038ca:	f53f af2d 	bmi.w	8003728 <_svfiprintf_r+0x28>
 80038ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038d0:	e72c      	b.n	800372c <_svfiprintf_r+0x2c>
 80038d2:	ab03      	add	r3, sp, #12
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	462a      	mov	r2, r5
 80038d8:	4638      	mov	r0, r7
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <_svfiprintf_r+0x1f4>)
 80038dc:	a904      	add	r1, sp, #16
 80038de:	f000 f87d 	bl	80039dc <_printf_i>
 80038e2:	e7ed      	b.n	80038c0 <_svfiprintf_r+0x1c0>
 80038e4:	08003daa 	.word	0x08003daa
 80038e8:	08003db0 	.word	0x08003db0
 80038ec:	08003db4 	.word	0x08003db4
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003649 	.word	0x08003649

080038f8 <_printf_common>:
 80038f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038fc:	4616      	mov	r6, r2
 80038fe:	4698      	mov	r8, r3
 8003900:	688a      	ldr	r2, [r1, #8]
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4607      	mov	r7, r0
 8003906:	4293      	cmp	r3, r2
 8003908:	bfb8      	it	lt
 800390a:	4613      	movlt	r3, r2
 800390c:	6033      	str	r3, [r6, #0]
 800390e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003912:	460c      	mov	r4, r1
 8003914:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003918:	b10a      	cbz	r2, 800391e <_printf_common+0x26>
 800391a:	3301      	adds	r3, #1
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	0699      	lsls	r1, r3, #26
 8003922:	bf42      	ittt	mi
 8003924:	6833      	ldrmi	r3, [r6, #0]
 8003926:	3302      	addmi	r3, #2
 8003928:	6033      	strmi	r3, [r6, #0]
 800392a:	6825      	ldr	r5, [r4, #0]
 800392c:	f015 0506 	ands.w	r5, r5, #6
 8003930:	d106      	bne.n	8003940 <_printf_common+0x48>
 8003932:	f104 0a19 	add.w	sl, r4, #25
 8003936:	68e3      	ldr	r3, [r4, #12]
 8003938:	6832      	ldr	r2, [r6, #0]
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	42ab      	cmp	r3, r5
 800393e:	dc2b      	bgt.n	8003998 <_printf_common+0xa0>
 8003940:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003944:	6822      	ldr	r2, [r4, #0]
 8003946:	3b00      	subs	r3, #0
 8003948:	bf18      	it	ne
 800394a:	2301      	movne	r3, #1
 800394c:	0692      	lsls	r2, r2, #26
 800394e:	d430      	bmi.n	80039b2 <_printf_common+0xba>
 8003950:	4641      	mov	r1, r8
 8003952:	4638      	mov	r0, r7
 8003954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003958:	47c8      	blx	r9
 800395a:	3001      	adds	r0, #1
 800395c:	d023      	beq.n	80039a6 <_printf_common+0xae>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	f003 0306 	and.w	r3, r3, #6
 8003966:	2b04      	cmp	r3, #4
 8003968:	bf14      	ite	ne
 800396a:	2500      	movne	r5, #0
 800396c:	6833      	ldreq	r3, [r6, #0]
 800396e:	f04f 0600 	mov.w	r6, #0
 8003972:	bf08      	it	eq
 8003974:	68e5      	ldreq	r5, [r4, #12]
 8003976:	f104 041a 	add.w	r4, r4, #26
 800397a:	bf08      	it	eq
 800397c:	1aed      	subeq	r5, r5, r3
 800397e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003982:	bf08      	it	eq
 8003984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003988:	4293      	cmp	r3, r2
 800398a:	bfc4      	itt	gt
 800398c:	1a9b      	subgt	r3, r3, r2
 800398e:	18ed      	addgt	r5, r5, r3
 8003990:	42b5      	cmp	r5, r6
 8003992:	d11a      	bne.n	80039ca <_printf_common+0xd2>
 8003994:	2000      	movs	r0, #0
 8003996:	e008      	b.n	80039aa <_printf_common+0xb2>
 8003998:	2301      	movs	r3, #1
 800399a:	4652      	mov	r2, sl
 800399c:	4641      	mov	r1, r8
 800399e:	4638      	mov	r0, r7
 80039a0:	47c8      	blx	r9
 80039a2:	3001      	adds	r0, #1
 80039a4:	d103      	bne.n	80039ae <_printf_common+0xb6>
 80039a6:	f04f 30ff 	mov.w	r0, #4294967295
 80039aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ae:	3501      	adds	r5, #1
 80039b0:	e7c1      	b.n	8003936 <_printf_common+0x3e>
 80039b2:	2030      	movs	r0, #48	@ 0x30
 80039b4:	18e1      	adds	r1, r4, r3
 80039b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039c0:	4422      	add	r2, r4
 80039c2:	3302      	adds	r3, #2
 80039c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039c8:	e7c2      	b.n	8003950 <_printf_common+0x58>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4622      	mov	r2, r4
 80039ce:	4641      	mov	r1, r8
 80039d0:	4638      	mov	r0, r7
 80039d2:	47c8      	blx	r9
 80039d4:	3001      	adds	r0, #1
 80039d6:	d0e6      	beq.n	80039a6 <_printf_common+0xae>
 80039d8:	3601      	adds	r6, #1
 80039da:	e7d9      	b.n	8003990 <_printf_common+0x98>

080039dc <_printf_i>:
 80039dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	7e0f      	ldrb	r7, [r1, #24]
 80039e2:	4691      	mov	r9, r2
 80039e4:	2f78      	cmp	r7, #120	@ 0x78
 80039e6:	4680      	mov	r8, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	469a      	mov	sl, r3
 80039ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039f2:	d807      	bhi.n	8003a04 <_printf_i+0x28>
 80039f4:	2f62      	cmp	r7, #98	@ 0x62
 80039f6:	d80a      	bhi.n	8003a0e <_printf_i+0x32>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	f000 80d3 	beq.w	8003ba4 <_printf_i+0x1c8>
 80039fe:	2f58      	cmp	r7, #88	@ 0x58
 8003a00:	f000 80ba 	beq.w	8003b78 <_printf_i+0x19c>
 8003a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a0c:	e03a      	b.n	8003a84 <_printf_i+0xa8>
 8003a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d8f6      	bhi.n	8003a04 <_printf_i+0x28>
 8003a16:	a101      	add	r1, pc, #4	@ (adr r1, 8003a1c <_printf_i+0x40>)
 8003a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a1c:	08003a75 	.word	0x08003a75
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a05 	.word	0x08003a05
 8003a28:	08003a05 	.word	0x08003a05
 8003a2c:	08003a05 	.word	0x08003a05
 8003a30:	08003a05 	.word	0x08003a05
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a05 	.word	0x08003a05
 8003a3c:	08003a05 	.word	0x08003a05
 8003a40:	08003a05 	.word	0x08003a05
 8003a44:	08003a05 	.word	0x08003a05
 8003a48:	08003b8b 	.word	0x08003b8b
 8003a4c:	08003ab3 	.word	0x08003ab3
 8003a50:	08003b45 	.word	0x08003b45
 8003a54:	08003a05 	.word	0x08003a05
 8003a58:	08003a05 	.word	0x08003a05
 8003a5c:	08003bad 	.word	0x08003bad
 8003a60:	08003a05 	.word	0x08003a05
 8003a64:	08003ab3 	.word	0x08003ab3
 8003a68:	08003a05 	.word	0x08003a05
 8003a6c:	08003a05 	.word	0x08003a05
 8003a70:	08003b4d 	.word	0x08003b4d
 8003a74:	6833      	ldr	r3, [r6, #0]
 8003a76:	1d1a      	adds	r2, r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6032      	str	r2, [r6, #0]
 8003a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e09e      	b.n	8003bc6 <_printf_i+0x1ea>
 8003a88:	6833      	ldr	r3, [r6, #0]
 8003a8a:	6820      	ldr	r0, [r4, #0]
 8003a8c:	1d19      	adds	r1, r3, #4
 8003a8e:	6031      	str	r1, [r6, #0]
 8003a90:	0606      	lsls	r6, r0, #24
 8003a92:	d501      	bpl.n	8003a98 <_printf_i+0xbc>
 8003a94:	681d      	ldr	r5, [r3, #0]
 8003a96:	e003      	b.n	8003aa0 <_printf_i+0xc4>
 8003a98:	0645      	lsls	r5, r0, #25
 8003a9a:	d5fb      	bpl.n	8003a94 <_printf_i+0xb8>
 8003a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	da03      	bge.n	8003aac <_printf_i+0xd0>
 8003aa4:	232d      	movs	r3, #45	@ 0x2d
 8003aa6:	426d      	negs	r5, r5
 8003aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003aac:	230a      	movs	r3, #10
 8003aae:	4859      	ldr	r0, [pc, #356]	@ (8003c14 <_printf_i+0x238>)
 8003ab0:	e011      	b.n	8003ad6 <_printf_i+0xfa>
 8003ab2:	6821      	ldr	r1, [r4, #0]
 8003ab4:	6833      	ldr	r3, [r6, #0]
 8003ab6:	0608      	lsls	r0, r1, #24
 8003ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003abc:	d402      	bmi.n	8003ac4 <_printf_i+0xe8>
 8003abe:	0649      	lsls	r1, r1, #25
 8003ac0:	bf48      	it	mi
 8003ac2:	b2ad      	uxthmi	r5, r5
 8003ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	bf14      	ite	ne
 8003aca:	230a      	movne	r3, #10
 8003acc:	2308      	moveq	r3, #8
 8003ace:	4851      	ldr	r0, [pc, #324]	@ (8003c14 <_printf_i+0x238>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ad6:	6866      	ldr	r6, [r4, #4]
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	bfa8      	it	ge
 8003adc:	6821      	ldrge	r1, [r4, #0]
 8003ade:	60a6      	str	r6, [r4, #8]
 8003ae0:	bfa4      	itt	ge
 8003ae2:	f021 0104 	bicge.w	r1, r1, #4
 8003ae6:	6021      	strge	r1, [r4, #0]
 8003ae8:	b90d      	cbnz	r5, 8003aee <_printf_i+0x112>
 8003aea:	2e00      	cmp	r6, #0
 8003aec:	d04b      	beq.n	8003b86 <_printf_i+0x1aa>
 8003aee:	4616      	mov	r6, r2
 8003af0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003af4:	fb03 5711 	mls	r7, r3, r1, r5
 8003af8:	5dc7      	ldrb	r7, [r0, r7]
 8003afa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003afe:	462f      	mov	r7, r5
 8003b00:	42bb      	cmp	r3, r7
 8003b02:	460d      	mov	r5, r1
 8003b04:	d9f4      	bls.n	8003af0 <_printf_i+0x114>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d10b      	bne.n	8003b22 <_printf_i+0x146>
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	07df      	lsls	r7, r3, #31
 8003b0e:	d508      	bpl.n	8003b22 <_printf_i+0x146>
 8003b10:	6923      	ldr	r3, [r4, #16]
 8003b12:	6861      	ldr	r1, [r4, #4]
 8003b14:	4299      	cmp	r1, r3
 8003b16:	bfde      	ittt	le
 8003b18:	2330      	movle	r3, #48	@ 0x30
 8003b1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b22:	1b92      	subs	r2, r2, r6
 8003b24:	6122      	str	r2, [r4, #16]
 8003b26:	464b      	mov	r3, r9
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f8cd a000 	str.w	sl, [sp]
 8003b30:	aa03      	add	r2, sp, #12
 8003b32:	f7ff fee1 	bl	80038f8 <_printf_common>
 8003b36:	3001      	adds	r0, #1
 8003b38:	d14a      	bne.n	8003bd0 <_printf_i+0x1f4>
 8003b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3e:	b004      	add	sp, #16
 8003b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	f043 0320 	orr.w	r3, r3, #32
 8003b4a:	6023      	str	r3, [r4, #0]
 8003b4c:	2778      	movs	r7, #120	@ 0x78
 8003b4e:	4832      	ldr	r0, [pc, #200]	@ (8003c18 <_printf_i+0x23c>)
 8003b50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	6831      	ldr	r1, [r6, #0]
 8003b58:	061f      	lsls	r7, r3, #24
 8003b5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b5e:	d402      	bmi.n	8003b66 <_printf_i+0x18a>
 8003b60:	065f      	lsls	r7, r3, #25
 8003b62:	bf48      	it	mi
 8003b64:	b2ad      	uxthmi	r5, r5
 8003b66:	6031      	str	r1, [r6, #0]
 8003b68:	07d9      	lsls	r1, r3, #31
 8003b6a:	bf44      	itt	mi
 8003b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b70:	6023      	strmi	r3, [r4, #0]
 8003b72:	b11d      	cbz	r5, 8003b7c <_printf_i+0x1a0>
 8003b74:	2310      	movs	r3, #16
 8003b76:	e7ab      	b.n	8003ad0 <_printf_i+0xf4>
 8003b78:	4826      	ldr	r0, [pc, #152]	@ (8003c14 <_printf_i+0x238>)
 8003b7a:	e7e9      	b.n	8003b50 <_printf_i+0x174>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	f023 0320 	bic.w	r3, r3, #32
 8003b82:	6023      	str	r3, [r4, #0]
 8003b84:	e7f6      	b.n	8003b74 <_printf_i+0x198>
 8003b86:	4616      	mov	r6, r2
 8003b88:	e7bd      	b.n	8003b06 <_printf_i+0x12a>
 8003b8a:	6833      	ldr	r3, [r6, #0]
 8003b8c:	6825      	ldr	r5, [r4, #0]
 8003b8e:	1d18      	adds	r0, r3, #4
 8003b90:	6961      	ldr	r1, [r4, #20]
 8003b92:	6030      	str	r0, [r6, #0]
 8003b94:	062e      	lsls	r6, r5, #24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	d501      	bpl.n	8003b9e <_printf_i+0x1c2>
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	e002      	b.n	8003ba4 <_printf_i+0x1c8>
 8003b9e:	0668      	lsls	r0, r5, #25
 8003ba0:	d5fb      	bpl.n	8003b9a <_printf_i+0x1be>
 8003ba2:	8019      	strh	r1, [r3, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4616      	mov	r6, r2
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	e7bc      	b.n	8003b26 <_printf_i+0x14a>
 8003bac:	6833      	ldr	r3, [r6, #0]
 8003bae:	2100      	movs	r1, #0
 8003bb0:	1d1a      	adds	r2, r3, #4
 8003bb2:	6032      	str	r2, [r6, #0]
 8003bb4:	681e      	ldr	r6, [r3, #0]
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	4630      	mov	r0, r6
 8003bba:	f000 f859 	bl	8003c70 <memchr>
 8003bbe:	b108      	cbz	r0, 8003bc4 <_printf_i+0x1e8>
 8003bc0:	1b80      	subs	r0, r0, r6
 8003bc2:	6060      	str	r0, [r4, #4]
 8003bc4:	6863      	ldr	r3, [r4, #4]
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bce:	e7aa      	b.n	8003b26 <_printf_i+0x14a>
 8003bd0:	4632      	mov	r2, r6
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	4640      	mov	r0, r8
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	47d0      	blx	sl
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d0ad      	beq.n	8003b3a <_printf_i+0x15e>
 8003bde:	6823      	ldr	r3, [r4, #0]
 8003be0:	079b      	lsls	r3, r3, #30
 8003be2:	d413      	bmi.n	8003c0c <_printf_i+0x230>
 8003be4:	68e0      	ldr	r0, [r4, #12]
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	4298      	cmp	r0, r3
 8003bea:	bfb8      	it	lt
 8003bec:	4618      	movlt	r0, r3
 8003bee:	e7a6      	b.n	8003b3e <_printf_i+0x162>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4632      	mov	r2, r6
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	47d0      	blx	sl
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d09d      	beq.n	8003b3a <_printf_i+0x15e>
 8003bfe:	3501      	adds	r5, #1
 8003c00:	68e3      	ldr	r3, [r4, #12]
 8003c02:	9903      	ldr	r1, [sp, #12]
 8003c04:	1a5b      	subs	r3, r3, r1
 8003c06:	42ab      	cmp	r3, r5
 8003c08:	dcf2      	bgt.n	8003bf0 <_printf_i+0x214>
 8003c0a:	e7eb      	b.n	8003be4 <_printf_i+0x208>
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	f104 0619 	add.w	r6, r4, #25
 8003c12:	e7f5      	b.n	8003c00 <_printf_i+0x224>
 8003c14:	08003dbb 	.word	0x08003dbb
 8003c18:	08003dcc 	.word	0x08003dcc

08003c1c <memmove>:
 8003c1c:	4288      	cmp	r0, r1
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	eb01 0402 	add.w	r4, r1, r2
 8003c24:	d902      	bls.n	8003c2c <memmove+0x10>
 8003c26:	4284      	cmp	r4, r0
 8003c28:	4623      	mov	r3, r4
 8003c2a:	d807      	bhi.n	8003c3c <memmove+0x20>
 8003c2c:	1e43      	subs	r3, r0, #1
 8003c2e:	42a1      	cmp	r1, r4
 8003c30:	d008      	beq.n	8003c44 <memmove+0x28>
 8003c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c3a:	e7f8      	b.n	8003c2e <memmove+0x12>
 8003c3c:	4601      	mov	r1, r0
 8003c3e:	4402      	add	r2, r0
 8003c40:	428a      	cmp	r2, r1
 8003c42:	d100      	bne.n	8003c46 <memmove+0x2a>
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c4e:	e7f7      	b.n	8003c40 <memmove+0x24>

08003c50 <_sbrk_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4d05      	ldr	r5, [pc, #20]	@ (8003c6c <_sbrk_r+0x1c>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fd fb5e 	bl	800131c <_sbrk>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_sbrk_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_sbrk_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	20000334 	.word	0x20000334

08003c70 <memchr>:
 8003c70:	4603      	mov	r3, r0
 8003c72:	b510      	push	{r4, lr}
 8003c74:	b2c9      	uxtb	r1, r1
 8003c76:	4402      	add	r2, r0
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	d101      	bne.n	8003c82 <memchr+0x12>
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e003      	b.n	8003c8a <memchr+0x1a>
 8003c82:	7804      	ldrb	r4, [r0, #0]
 8003c84:	3301      	adds	r3, #1
 8003c86:	428c      	cmp	r4, r1
 8003c88:	d1f6      	bne.n	8003c78 <memchr+0x8>
 8003c8a:	bd10      	pop	{r4, pc}

08003c8c <memcpy>:
 8003c8c:	440a      	add	r2, r1
 8003c8e:	4291      	cmp	r1, r2
 8003c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c94:	d100      	bne.n	8003c98 <memcpy+0xc>
 8003c96:	4770      	bx	lr
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c9e:	4291      	cmp	r1, r2
 8003ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ca4:	d1f9      	bne.n	8003c9a <memcpy+0xe>
 8003ca6:	bd10      	pop	{r4, pc}

08003ca8 <_realloc_r>:
 8003ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cac:	4680      	mov	r8, r0
 8003cae:	4615      	mov	r5, r2
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	b921      	cbnz	r1, 8003cbe <_realloc_r+0x16>
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cba:	f7ff bc39 	b.w	8003530 <_malloc_r>
 8003cbe:	b92a      	cbnz	r2, 8003ccc <_realloc_r+0x24>
 8003cc0:	f7ff fbcc 	bl	800345c <_free_r>
 8003cc4:	2400      	movs	r4, #0
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ccc:	f000 f81a 	bl	8003d04 <_malloc_usable_size_r>
 8003cd0:	4285      	cmp	r5, r0
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	d802      	bhi.n	8003cdc <_realloc_r+0x34>
 8003cd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003cda:	d8f4      	bhi.n	8003cc6 <_realloc_r+0x1e>
 8003cdc:	4629      	mov	r1, r5
 8003cde:	4640      	mov	r0, r8
 8003ce0:	f7ff fc26 	bl	8003530 <_malloc_r>
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d0ec      	beq.n	8003cc4 <_realloc_r+0x1c>
 8003cea:	42b5      	cmp	r5, r6
 8003cec:	462a      	mov	r2, r5
 8003cee:	4621      	mov	r1, r4
 8003cf0:	bf28      	it	cs
 8003cf2:	4632      	movcs	r2, r6
 8003cf4:	f7ff ffca 	bl	8003c8c <memcpy>
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4640      	mov	r0, r8
 8003cfc:	f7ff fbae 	bl	800345c <_free_r>
 8003d00:	463c      	mov	r4, r7
 8003d02:	e7e0      	b.n	8003cc6 <_realloc_r+0x1e>

08003d04 <_malloc_usable_size_r>:
 8003d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d08:	1f18      	subs	r0, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	bfbc      	itt	lt
 8003d0e:	580b      	ldrlt	r3, [r1, r0]
 8003d10:	18c0      	addlt	r0, r0, r3
 8003d12:	4770      	bx	lr

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
